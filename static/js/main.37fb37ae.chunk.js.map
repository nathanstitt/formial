{"version":3,"sources":["../../src/lib.ts","../../src/data.ts","../../src/editor/store.ts","../../src/editor/default-controls.tsx","../../src/editor/controls.tsx","../../src/hooks/use-key-press.ts","../../src/editor/editable-text.tsx","../../src/editor/form.tsx","../../src/editor/edit-panel.tsx","../../src/editor.tsx","../../src/render.ts","App.tsx","index.tsx"],"names":["uuidv4","replace","r","Math","c","v","isSerializedInput","toBeDetermined","isSerializedContainer","isSerializedText","isSerializedForm","Element","constructor","control","data","this","deepmerge","className","id","type","Container","options","children","map","direction","Form","cm","col","Error","TextElement","tag","text","InputElement","label","name","classNames","wrapper","input","attributes","placeholder","Object","key","Control","definition","isContainer","isInput","isText","RowControl","TextControl","ColumnControl","defaultControls","registered","register","controls","sc","React","useStoreContext","useStore","unserialize","dataChildren","child","storeReducer","st","action","store","fromContainer","fromIndex","element","destIndex","cntrl","console","container","addElement","form","e","editing","target","undefined","initStore","defaultValue","Map","useProvidedStoreContext","useStoreReducer","dispatch","renderOptions","el","rend","icon","h","para","readOnly","hasOptions","n","value","ControlLabelEl","cursor","backgroundColor","listStyle","margin","padding","userSelect","border","svg","height","marginRight","ControlLabel","useDrag","item","collect","monitor","opacity","ref","drag","style","ControlsListingEl","overflow","paddingRight","ul","ControlsListing","Array","defaultOptions","useKeyPress","keys","callback","opts","keyList","useMemo","callbackRef","useRef","useEffect","handle","useCallback","identifier","window","targetNode","EditableText","props","useState","wrapperRef","textRef","inputRef","onUpdated","onTextSaved","setIsInputActive","ev","setInputValue","isInputActive","edit","onBlur","handleInputChange","event","handleSpanClick","s","range","position","startOffset","cn","onClick","display","inputValue","onChange","FormDropEl","minHeight","flex","useFormDrop","useDrop","accept","isHovered","drop","dropRef","FormDrop","ElementPreviewEl","flexDirection","color","justifyContent","alignItems","marginBottom","zIndex","fontSize","marginLeft","top","right","borderRadius","transition","width","button","background","borderBottomLeftRadius","outline","flexWrap","Controls","InputPreview","preview","TextPreview","updated","patch","textValue","ContainerPreviewEl","left","borderTopRightRadius","borderTopLeftRadius","borderBottomWidth","ContainerDropEl","minWidth","ContainerDrop","ContainerPreview","index","empty","i","parent","ElementPreview","FormElementsEl","justifyItems","boxSizing","boxShadow","borderColor","FormElements","canDrop","NewAttribute","nested","saveValue","deleteAttr","EditAttribute","attributeName","attrs","Attribute","Options","optionNames","attrName","InputEdit","dp","ContainerEdit","TextHeadingSize","txt","TextEdit","Edit","EditPanelEl","borderBottom","paddingBottom","overflowY","borderTop","legend","fontWeight","fieldset","marginTop","textarea","span","EditPanel","panelRef","firstInput","setTimeout","FormPanelEl","FormPanel","EditorEl","gridTemplateColumns","gridTemplateRows","gap","Editor","ctx","backend","HTML5Backend","StoreContext","document","skipAttributes","class","cx","columnSmWidth","parentElement","root","k","String","renderer","float","for","createInput","labelTitle","cb","optId","inputId","option","labelEl","inputType","select","row","DEFAULT","App","setValue","htmlRef","json","serialize","log","JSON","stringify","tree","render","current","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.37fb37ae.chunk.js","sourcesContent":["// uses Math.random which may only be pseudo random\nexport function uuidv4():string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","\nexport interface SerializedElement {\n    type: string\n    id: string\n    control: string\n    className: string\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedInputElement extends SerializedElement {\n    type: string\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedTextElement extends SerializedElement {\n    tag: string\n    text: string\n}\n//  id: string; type: string; control: string;   tag: string; text: string;\n\nexport type ElementSerialization =\n    | SerializedForm\n    | SerializedElement\n    | SerializedContainer\n    | SerializedTextElement\n    | SerializedInputElement\n\n\nexport interface SerializedContainer extends SerializedElement {\n    direction: string // 'row' | 'column'\n    children: Array<ElementSerialization>\n}\n\nexport interface SerializedForm extends SerializedContainer {\n\n}\n\nexport function isSerializedInput(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedInputElement { return (toBeDetermined.type === 'INPUT') }\n\nexport function isSerializedContainer(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedContainer { return (toBeDetermined.type === 'CONTAINER') }\n\nexport function isSerializedText(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedTextElement { return (toBeDetermined.type === 'TEXT') }\n\nexport function isSerializedForm(\n    toBeDetermined: any\n): toBeDetermined is SerializedForm { return (toBeDetermined.type === 'FORM') }\n\n","import * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport { uuidv4 } from '../lib'\nimport {\n    SerializedForm,\n    SerializedElement,\n    SerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement,\n    isSerializedText,\n    isSerializedContainer,\n    isSerializedInput,\n    ElementSerialization,\n} from '../data'\n\nexport interface ControlDefinition {\n    id: string\n    icon: React.ReactNode\n    name: string\n    placeholder?(element: Element): React.ReactNode\n    hasOptions?: boolean\n}\n\ntype ControlsMap = Map<string, Control>\n\nexport interface Store {\n    controls: ControlsMap,\n    form: Form\n    editing?: Element\n}\n\nexport interface ElementData {\n    className: string\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nexport class Element {\n\n    id: string\n    control: Control\n    data: ElementData\n    constructor(control: Control, data:any = {}) {\n        this.control = control\n        this.id = data.id || uuidv4()\n        this.data = deepmerge({\n            className: '',\n        }, data)\n    }\n\n    serialize(): SerializedElement {\n        return {\n            id: this.id,\n            type: 'element',\n            control: this.control.id,\n            ...this.data,\n        }\n    }\n\n}\n\n\ninterface ContainerData extends ElementData {\n    children: Array<Element>\n}\n\n\nexport interface ContainerOptions {\n    id?: string\n    direction: string // 'row' | 'column'\n    data?: ContainerData\n    children?: Array<Element>\n}\n\ntype ContainerChild = Element|TextElement|Container|InputElement\n\nexport class Container extends Element {\n\n    direction: string // 'row' | 'column'\n    children: Array<ContainerChild>\n    constructor(control:Control, options: ContainerOptions) {\n        super(control, options)\n        this.direction = options.direction || 'row'\n        this.children = options.children || []\n    }\n\n    serialize(): SerializedContainer {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            children: this.children.map(c => c.serialize()),\n            direction: this.direction,\n            type: 'CONTAINER',\n        }\n    }\n\n}\n\nexport class Form extends Container {\n\n    constructor(cm: ControlsMap, options?: ContainerOptions) {\n        const col = cm.get('col')\n        if (!col) { throw new Error(\"Column control doesn't exist?\") }\n        super(col, { ...options, direction: 'row' })\n    }\n\n    serialize(): SerializedForm {\n        return {\n            ...super.serialize(),\n            type: 'FORM',\n        }\n    }\n\n}\n\ninterface TextData extends ElementData {\n    tag: string\n    text: string\n}\n\nexport class TextElement extends Element {\n\n    data: TextData\n\n    constructor(control:Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge.all([{\n            tag: control.id === 'para' ? 'p' : 'h3',\n            text: 'Some text…',\n            className: '',\n        }, data]) as TextData\n    }\n\n    serialize(): SerializedTextElement {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            type: 'TEXT',\n        }\n    }\n\n}\n\nexport interface InputData extends ElementData {\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\n\nexport class InputElement extends Element {\n\n    data: InputData\n\n    constructor(control: Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge({\n            label: `${this.control.name} label`,\n            className: 'mb-2',\n            name: `${this.control.id}-${Math.round(Math.random() * 9999) + 1000}`,\n            classNames: {\n                wrapper: this.wrapperClassName,\n                label: '',\n                input: 'form-control',\n            },\n            attributes: {},\n        }, data)\n        if (control.hasOptions && !this.data.options) {\n            this.data.options = {}\n        }\n    }\n\n    get wrapperClassName() {\n        switch (this.control.id) {\n            case 'input':\n            case 'textarea':\n            case 'select': {\n                return 'form-floating'\n            }\n        }\n        return 'form-control'\n    }\n\n    get placeholder(): React.ReactNode {\n        return (this.control.placeholder && this.control.placeholder(this)) || null\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    serialize(): SerializedInputElement {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            type: 'INPUT',\n        }\n    }\n\n}\n\n\nexport class Control implements ControlDefinition {\n\n    id: string\n    name: string\n    icon: React.ReactNode\n\n    hasOptions?: boolean\n    placeholder?: (element: Element) => React.ReactNode\n\n    constructor(definition: ControlDefinition) {\n        this.name = definition.name\n        this.id = definition.id\n        this.icon = definition.icon\n        this.placeholder = definition.placeholder\n        this.hasOptions = definition.hasOptions\n    }\n\n    createElement(): Element {\n        return new InputElement(this)\n    }\n\n}\n\nexport function isContainer(\n    toBeDetermined: any,\n): toBeDetermined is Container {\n    return (toBeDetermined instanceof Container)\n}\n\nexport function isInput(\n    toBeDetermined: any,\n): toBeDetermined is InputElement {\n    return (toBeDetermined instanceof InputElement)\n}\n\nexport function isText(\n    toBeDetermined: any,\n): toBeDetermined is TextElement {\n    return (toBeDetermined instanceof TextElement)\n}\n\nexport class RowControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { direction: 'row' })\n    }\n\n}\n\nexport class TextControl extends Control {\n\n    createElement(): Element {\n        return new TextElement(this)\n    }\n\n}\n\nexport class ColumnControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { direction: 'column' })\n    }\n\n}\n\nexport const defaultControls = {\n    registered: new Map<string, Control>(),\n\n    register(controls: Array<Control>) {\n        controls.forEach(c => this.registered.set(c.id, c))\n    },\n}\n\ninterface InsertElementOptions {\n    id: string,\n    container: Container, destIndex: number,\n    fromIndex?: number, fromContainer?: Container\n}\nexport function addElement(\n    store: Store,\n    {\n        id, container, destIndex, fromIndex, fromContainer,\n    }: InsertElementOptions,\n): Store {\n    let cntrl: Control | undefined\n    let element: Element | undefined\n\n    if (fromIndex != null && fromContainer) {\n        element = fromContainer.children[fromIndex]\n        fromContainer.children.splice(fromIndex, 1)\n        if (fromContainer === container && fromIndex < destIndex) {\n            destIndex -= 1 // eslint-disable-line no-param-reassign\n        }\n    } else {\n        cntrl = store.controls.get(id)\n        if (!cntrl) {\n            // eslint-disable-next-line no-console\n            console.warn(`attempted to drop id ${id} but no control exists`)\n            return store\n        }\n    }\n    if (!element && cntrl) {\n        element = cntrl.createElement()\n    }\n    if (element) {\n        container.children.splice(destIndex, 0, element)\n    }\n    return { ...store }\n}\n\ninterface StoreContext {\n    store: Store\n    dispatch: React.Dispatch<Action> //  (patch:any): void\n}\n\nconst sc = React.createContext(null as any as StoreContext)\n\nexport const useStoreContext = ():StoreContext => React.useContext(sc)\n\nexport const useStore = ():Store => useStoreContext().store\n\nconst unserialize = (cm: ControlsMap, data: ElementSerialization):Element|null => {\n    const control = cm.get(data.control)\n    if (!control) { return null }\n\n    if (isSerializedText(data)) {\n        return new TextElement(control, data)\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(control, data)\n    }\n\n\n    const children:Array<ContainerChild> = []\n    const dataChildren = (data as any).children\n    if (dataChildren) {\n        dataChildren.forEach((c:ElementSerialization) => {\n            const child = unserialize(cm, c)\n            if (child) children.push(child)\n        })\n    }\n\n    if (isSerializedContainer(data)) {\n        return new Container(control, { ...data, children })\n    }\n\n    // if all else fails attempt to create a form and unserialize it\n    return new Form(cm, { ...data, children } as any as ContainerOptions)\n}\n\ntype Action =\n    | { type: 'REPLACE', form?: SerializedForm }\n    | { type: 'ADD_ELEMENT', id: string,\n        container: Container, destIndex: number,\n        fromIndex?: number, fromContainer?: Container }\n    | { type: 'DELETE', target: Element, container: Container }\n    | { type: 'UPDATE', target: Element, patch: any }\n    | { type: 'EDIT', target: Element }\n    | { type: 'HIDE_EDIT' }\n    | { type: 'ADD_ATTRIBUTE', input: InputElement, nested: string }\n    | { type: 'DELETE_ATTRIBUTE', input: InputElement, nested: string, name: string }\n    | { type: 'REPLACE_NEW_ATTRIBUTE', input: InputElement, nested: string, name: string, }\n\nconst storeReducer = (st:Store, action: Action): Store => {\n    switch (action.type) {\n        case 'ADD_ELEMENT': {\n            return addElement(st, action)\n        }\n        case 'REPLACE': {\n            if (action.form) {\n                const form = unserialize(st.controls, action.form)\n                if (form && form instanceof Form) {\n                    return { ...st, form }\n                }\n            }\n            return st\n        }\n        case 'DELETE': {\n            action.container.children = [\n                ...action.container.children.filter(e => e.id !== action.target.id),\n            ]\n            return { ...st }\n        }\n        case 'UPDATE': {\n            action.target.data = deepmerge(action.target.data as any, action.patch)\n            return { ...st }\n        }\n        case 'EDIT': {\n            return { ...st, editing: action.target }\n        }\n        case 'HIDE_EDIT': {\n            return { ...st, editing: undefined }\n        }\n        case 'ADD_ATTRIBUTE': {\n            action.input.data[action.nested][''] = ''\n            return { ...st }\n        }\n        case 'REPLACE_NEW_ATTRIBUTE': {\n            delete action.input.data[action.nested]['']\n            action.input.data[action.nested][action.name] = ''\n            return { ...st }\n        }\n        case 'DELETE_ATTRIBUTE': {\n            delete action.input.data[action.nested][action.name]\n            return { ...st }\n        }\n    }\n    return st\n}\n\nexport const initStore = (defaultValue?: SerializedForm):Store => {\n    const store = Object.create(null)\n    store.controls = new Map(defaultControls.registered)\n    store.form = defaultValue ? unserialize(store.controls, defaultValue)\n        : new Form(store.controls, defaultValue)\n\n    // store.elements.push(store.controls.get('select')!.createElement());\n    // [store.editing] = store.elements\n\n    return store\n}\n\nexport const useStoreReducer = (defaultValue?: SerializedForm) => (\n    React.useReducer(storeReducer, defaultValue, initStore)\n)\n\nexport const useProvidedStoreContext = (defaultValue?: SerializedForm):StoreContext => {\n    const [store, dispatch] = useStoreReducer(defaultValue)\n\n    return React.useMemo<StoreContext>(() => ({ store, dispatch }), [store])\n}\n\nexport { sc as StoreContext, unserialize }\n","import * as React from 'react'\nimport { CaretSquareDown } from '@styled-icons/fa-regular/CaretSquareDown'\nimport { Font } from '@styled-icons/fa-solid/Font'\nimport { GripLines } from '@styled-icons/fa-solid/GripLines'\nimport { Square } from '@styled-icons/fa-regular/Square'\nimport { Heading } from '@styled-icons/fa-solid/Heading'\nimport { Paragraph } from '@styled-icons/fa-solid/Paragraph'\nimport { GripLinesVertical } from '@styled-icons/fa-solid/GripLinesVertical'\nimport { DotCircle } from '@styled-icons/fa-solid/DotCircle'\nimport { CheckSquare } from '@styled-icons/fa-solid/CheckSquare'\n\nimport {\n    Control, RowControl, ColumnControl, InputElement, TextControl, TextElement, defaultControls,\n} from './store'\n\ntype RenderT = (key: string, value: string) => React.ReactNode\n\nconst renderOptions = (el: InputElement, rend: RenderT) => {\n    const options = el.optionPairs\n    if (options.length === 0) {\n        return rend('', '')\n    }\n    return options.map(([name, label]) => (\n        <label key={name}>{rend(name, label)}<span>{label}</span></label>\n    ))\n}\n\n\ndefaultControls.register([\n    new RowControl({\n        id: 'row',\n        name: 'Row',\n        icon: <GripLines />,\n    }),\n    new ColumnControl({\n        id: 'col',\n        name: 'Column',\n        icon: <GripLinesVertical />,\n    }),\n\n    new TextControl({\n        id: 'heading',\n        name: 'Heading',\n        icon: <Heading />,\n        placeholder(h:TextElement) { return React.createElement(h.data.tag, h.data.text) },\n    }),\n\n    new TextControl({\n        id: 'para',\n        name: 'Paragraph',\n        icon: <Paragraph />,\n        placeholder(para:TextElement) { return <p>{para.data.text}</p> },\n    }),\n\n    new Control({\n        id: 'input',\n        name: 'Text Input',\n        icon: <Font />,\n        placeholder() { return <input type='text' className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'textarea',\n        name: 'Text Area',\n        icon: <Square />,\n        placeholder() { return <textarea className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'checkbox',\n        name: 'Checkboxes',\n        icon: <CheckSquare />,\n        hasOptions: true,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input type=\"checkbox\" name={n} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'radio',\n        name: 'Radio Input',\n        hasOptions: true,\n        icon: <DotCircle />,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input key={n} type=\"radio\" name={el.data.name} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'select',\n        name: 'Select',\n        hasOptions: true,\n        icon: <CaretSquareDown />,\n        placeholder(el: InputElement) {\n            const options = el.optionPairs\n            return (\n                <select name={el.data.name}>\n                    {options.map(([v, l]) => (\n                        <option key={v} value={v}>{l}</option>\n                    ))}\n                </select>\n            )\n        },\n    }),\n])\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useDrag } from 'react-dnd'\nimport { useStore, ControlDefinition } from './store'\nimport './default-controls'\n\nconst ControlLabelEl = styled.li({\n    cursor: 'pointer',\n    backgroundColor: 'white',\n    listStyle: 'none',\n    margin: '5px',\n    padding: '10px',\n    userSelect: 'none',\n    border: '1px dashed #ddd',\n    svg: {\n        height: '20px',\n        marginRight: '0.5rem',\n    },\n})\n\nconst ControlLabel:React.FC<ControlDefinition> = ({ id, name, icon }) => {\n    const [{ opacity }, drag] = useDrag({\n        item: { id, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ControlLabelEl ref={drag} style={{ opacity }}>\n            {icon}\n            <span>{name}</span>\n        </ControlLabelEl>\n    )\n}\n\nconst ControlsListingEl = styled.div({\n    overflow: 'auto',\n    paddingRight: '10px',\n    ul: {\n        padding: 0,\n        margin: 0,\n    },\n})\nexport const ControlsListing:React.FC = () => {\n    const { controls } = useStore()\n    return (\n        <ControlsListingEl className=\"controls-listing\">\n            <ul>\n                {Array.from(controls.values()).map(definition => (\n                    <ControlLabel key={definition.id} {...definition} />))}\n            </ul>\n        </ControlsListingEl>\n    )\n}\n","import { Ref, useEffect, useCallback, useRef, useMemo } from 'react'\n\n\ninterface Options {\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement>;\n}\n\nconst EVENT_NAME = 'keydown'\n\nconst defaultOptions = {\n\n\n}\n\n// hook from https://usehooks.com/useKeyPress/\nexport function useKeyPress(\n    keys: string | Array<string>,\n    callback: (e: KeyboardEvent) => any,\n    opts?: Options,\n): void {\n    const keyList: Array<string> = useMemo(() => {\n        if (Array.isArray(keys)) {\n            return keys\n        }\n        return [keys]\n    }, [keys])\n    const options = Object.assign({}, defaultOptions, opts) as any\n\n    const callbackRef = useRef<(e: KeyboardEvent) => any>(callback)\n    const { target } = options\n\n    useEffect(() => {\n        callbackRef.current = callback\n    })\n\n    const handle = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyList.some(identifier => e.key === identifier)) {\n                callbackRef.current(e)\n            }\n        },\n        [keyList],\n    )\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            const targetNode = target ? target.current : window\n            if (targetNode) {\n                targetNode.addEventListener(EVENT_NAME, handle)\n            }\n\n            return () => {\n                if (targetNode) {\n                    targetNode.removeEventListener(EVENT_NAME, handle)\n                }\n            }\n        }\n        return undefined\n    }, [keyList, target, callback])\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport cn from 'classnames'\nimport { useKeyPress } from '../hooks/use-key-press'\n\ninterface EditableTextProps {\n    className?: string\n    children: React.ReactNode\n    textValue: string\n    onTextSaved(text: string): void\n}\n\ninterface EditingState {\n    position: number\n}\n\n// mostly take from joelmturner.com/blog/inline-text-edit-react-hooks\n// but sets cursor position to match click position\nexport const EditableText:React.FC<EditableTextProps> = (props) => {\n    const { onTextSaved, textValue, children } = props\n\n    const [isInputActive, setIsInputActive] = useState<boolean | EditingState>(\n        false,\n    )\n    const [inputValue, setInputValue] = useState(textValue)\n\n    const wrapperRef = useRef<HTMLSpanElement>(null)\n    const textRef = useRef(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onUpdated = ():void => {\n        if (inputRef.current && inputRef.current.value !== textValue) {\n            onTextSaved(inputRef.current.value)\n        }\n        setIsInputActive(false)\n    }\n    const onClear = ():void => {\n        setInputValue(textValue)\n        setIsInputActive(false)\n    }\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                onUpdated()\n                break\n            }\n            case 'Escape': {\n                onClear()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    useEffect(() => {\n        if (isInputActive !== false) {\n            const edit = isInputActive as EditingState\n            const input = inputRef.current!\n            input.focus()\n            input.setSelectionRange(edit.position, edit.position)\n        }\n    }, [isInputActive])\n\n    const onBlur = useCallback(() => {\n        onUpdated()\n    }, [])\n\n    const handleInputChange = useCallback(\n        event => setInputValue(event.target.value),\n        [setInputValue],\n    )\n\n    const handleSpanClick = useCallback(() => {\n        const s = window.getSelection()\n        if (!s) {\n            return\n        }\n        const range = s.getRangeAt(0)\n        setIsInputActive({\n            position: range.startOffset,\n        })\n    }, [setIsInputActive])\n    return (\n        <span className={cn('inline-text', props.className)} ref={wrapperRef}>\n            <span\n                ref={textRef}\n                onClick={handleSpanClick}\n                style={{ display: isInputActive ? 'none' : 'inline' }}\n                className='inline-text display'\n            >\n                {children}\n            </span>\n            <input\n                ref={inputRef}\n                style={{\n\n                    display: isInputActive ? 'inline' : 'none',\n                }}\n                value={inputValue}\n                onChange={handleInputChange}\n                onBlur={onBlur}\n                className='inline-text editing'\n            />\n        </span>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { useDrop, useDrag, DragElementWrapper, DragSourceOptions } from 'react-dnd'\nimport { GripHorizontal } from '@styled-icons/fa-solid/GripHorizontal'\nimport { Edit } from '@styled-icons/fa-solid/Edit'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport { EditableText } from './editable-text'\n\nimport {\n    useStore,\n    Element,\n    isContainer,\n    isText,\n    isInput,\n    InputElement,\n    TextElement,\n    useStoreContext,\n    Container,\n} from './store'\n\nconst revealColor = '#e8e8e8'\nconst dropAcceptableColor = '#c1c1c1'\n\nconst FormDropEl = styled.div({\n    minHeight: '15px',\n    border: '1px solid white',\n    '&:last-child': {\n        flex: 1,\n    },\n})\n\ninterface DropProps {\n    index: number\n    container: Container\n}\n\ninterface DropItem {\n    id: string\n    fromIndex?: number\n    fromContainer?: Container\n}\n\nconst useFormDrop = ({ index, container }: DropProps) => {\n    const sc = useStoreContext()\n    const [{ isHovered }, dropRef] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        drop: (item) => {\n            const { id, fromIndex, fromContainer } = (item as any as DropItem)\n            sc.dispatch({\n                type: 'ADD_ELEMENT',\n                id,\n                destIndex: index,\n                container,\n                fromIndex,\n                fromContainer,\n            })\n        },\n    })\n    return { isHovered, dropRef }\n}\n\nexport const FormDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n    return <FormDropEl ref={dropRef} className={cn('drop', { isHovered })} />\n}\n\nconst ElementPreviewEl = styled.div({\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n    padding: '20px',\n    color: '#0c0c0c',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    minHeight: '40px',\n\n    '&.input .label, &.textarea .label': {\n        marginBottom: '-20px',\n        zIndex: 1,\n        fontSize: '80%',\n        marginLeft: '10px',\n    },\n    '.control-type': {\n        fontSize: '0.8rem',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        border: '1px solid',\n        padding: '2px',\n        borderRadius: '8px',\n    },\n\n    '&:hover': {\n        backgroundColor: 'white',\n        '> .controls': {\n            opacity: 1,\n        },\n    },\n\n    '.controls': {\n        opacity: 0,\n        position: 'absolute',\n\n        transition: 'opacity 0.3s ease-in-out',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'flex-start',\n        width: '110px',\n        '.move svg': { cursor: 'move' },\n        button: {\n            border: 0,\n            padding: 0,\n            cursor: 'pointer',\n            backgroundColor: 'transparent',\n            '&:hover': {\n                svg: { color: '#212121' },\n            },\n        },\n        svg: {\n            height: '20px',\n            color: 'gray',\n            transition: 'opacity 0.3s ease-in-out',\n        },\n        '> .controls': {\n            right: 0,\n        },\n    },\n\n    '>.controls': {\n        background: 'white',\n        right: 0,\n        top: 0,\n        padding: '5px',\n        borderBottomLeftRadius: '5px',\n    },\n\n    '.inline-text': {\n        padding: 0,\n        border: 0,\n        fontSize: 'inherit',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n\n    '.label': {\n        fontSize: '20px',\n        marginBottom: '5px',\n    },\n\n    '.control-preview': {\n        flex: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        '&.row': {\n            flexDirection: 'column',\n        },\n    },\n    'input + span': {\n        marginLeft: '10px',\n    },\n})\n\nconst Controls:React.FC<{\n    target: Element | Container\n    container: Container,\n    drag: DragElementWrapper<DragSourceOptions>,\n}> = ({\n    target, container, drag,\n}) => {\n    const sc = useStoreContext()\n\n    return (\n        <div className={cn('controls', { container: isContainer(target) })}>\n            <button className='trash' onClick={() => sc.dispatch({\n                type: 'DELETE', target, container,\n            })}>\n                <TrashAlt />\n            </button>\n            <button onClick={() => sc.dispatch({ type: 'EDIT', target })}>\n                <Edit />\n            </button>\n            <button className='move' ref={drag}>\n                <GripHorizontal />\n            </button>\n        </div>\n    )\n}\n\nconst InputPreview: React.FC<{\n    index: number\n    input: InputElement\n    container: Container\n}> = ({\n    index, input, container,\n}) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: input.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', input.control.id)}\n        >\n            <div className='control-preview'>\n                <span className=\"label\">{input.data.label}</span>\n                {input.placeholder}\n            </div>\n            <Controls target={input} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\nconst TextPreview: React.FC<{\n    index: number\n    control: TextElement\n    container: Container\n}> = ({\n    index, control, container,\n}) => {\n    const sc = useStoreContext()\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: control.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n    const text = React.createElement(control.data.tag, {}, control.data.text)\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', control.control.id)}\n        >\n            <div className='control-preview'>\n                <EditableText\n                    onTextSaved={(updated) => {\n                        sc.dispatch({ type: 'UPDATE', target: control, patch: { text: updated } })\n                    }}\n                    textValue={control.data.text}\n                >{text}</EditableText>\n            </div>\n            <Controls target={control} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\n\nconst ContainerPreviewEl = styled(ElementPreviewEl)({\n    border: '1px dashed gray',\n    minHeight: '40px',\n    borderRadius: '5px',\n    padding: '0',\n    alignItems: 'stretch',\n    '> .container.controls': {\n        background: 'white',\n        border: '1px dashed gray',\n        position: 'absolute',\n    },\n    '&.container-row': {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        minHeight: '80px',\n        '> .container-drop': {\n            width: '100%',\n        },\n        '> .container-column': {\n            margin: '-1px',\n            flex: 1,\n        },\n        '> .container.controls': {\n            top: '-27px',\n            left: 'calc(50% - 15px)',\n            padding: '2px 5px',\n            borderTopRightRadius: '5px',\n            borderTopLeftRadius: '5px',\n            borderBottomWidth: 0,\n        },\n    },\n    '> .container-preview': {\n        flex: 1,\n    },\n\n    '&.empty': {\n        alignItems: 'stretch',\n        '> .drop': {\n            flex: 1,\n        },\n    },\n    '&.container-column': {\n        '> .container.controls': {\n            top: 'calc(50% - 40px)',\n            left: '-25px',\n            right: 'auto',\n            display: 'flex',\n            flexDirection: 'column',\n            width: '30px',\n            borderRadius: '5px',\n            alignItems: 'center',\n            '> *': {\n                marginLeft: 0,\n            },\n        },\n        '> .element-preview': {\n            flex: 1,\n        },\n    },\n    '&:hover': {\n        '.container-drop': {\n            backgroundColor: revealColor,\n        },\n    },\n})\n\nconst ContainerDropEl = styled(FormDropEl)({\n    minWidth: '20px',\n\n})\n\nconst ContainerDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n\n    return (\n        <ContainerDropEl\n            ref={dropRef}\n            className={cn('drop', 'container-drop', { isHovered })}\n        />\n    )\n}\n\nconst ContainerPreview:React.FC<{\n    container: Container\n    parent: Container\n    index: number\n}> = ({ parent, container, index }) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: container.id, fromIndex: index, fromContainer: parent, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ContainerPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('container-preview', `container-${container.direction}`, {\n                empty: container.children.length === 0,\n            })}\n        >\n            <ContainerDrop container={container} index={0} />\n\n            {container.children.map((el, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={el} />\n                    <ContainerDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n\n            <Controls target={container} container={parent} drag={drag} />\n\n        </ContainerPreviewEl>\n    )\n}\n\n\nconst ElementPreview:React.FC<{\n    el: Element|Container,\n    index: number,\n    container: Container,\n}> = ({ el, index, container }) => {\n    if (isContainer(el)) {\n        return <ContainerPreview parent={container} container={el} index={index} />\n    }\n    if (isText(el)) {\n        return <TextPreview control={el} container={container} index={index} />\n    }\n    if (isInput(el)) {\n        return <InputPreview input={el} container={container} index={index} />\n    }\n\n    return null\n}\n\n\nconst FormElementsEl = styled.div<{editing: boolean}>(({ editing }) => ({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyItems: 'flex-start',\n    background: '#fafafa',\n    padding: '20px',\n    boxSizing: 'border-box',\n    boxShadow: '0 0 2px 1px rgba(0, 0, 0, 0.1)',\n    opacity: editing ? '0.3' : '1',\n    transition: 'all 0.3s ease-in-out',\n    width: 'fit-content',\n    minWidth: '100%',\n\n    '.drop': {\n        transition: 'all 0.3s ease-in-out',\n    },\n    '> .container-preview': {\n        margin: '0 2px',\n    },\n    '&.isHovered': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '&:hover': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '.drop.isHovered': {\n        borderColor: 'black',\n        backgroundColor: dropAcceptableColor,\n    },\n    '.drop:hover': {\n        backgroundColor: dropAcceptableColor,\n    },\n    'p, h1, h2, h3, h4, h5, h6': {\n        padding: 0,\n        margin: 0,\n    },\n}))\nexport const FormElements = () => {\n    const { form, editing } = useStore()\n    const [{ isHovered }, drop] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        canDrop: () => false,\n    })\n\n    return (\n        <FormElementsEl ref={drop} editing={!!editing} className={cn('form-elements', { isHovered })}>\n            <FormDrop container={form} index={0} />\n            {form.children.map((e, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={form} el={e} />\n                    <FormDrop container={form} index={i + 1} />\n                </React.Fragment>\n            ))}\n        </FormElementsEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport {\n    useStoreContext, InputElement, Element, Container, isContainer, isInput, isText, TextElement,\n} from './store'\nimport { useKeyPress } from '../hooks/use-key-press'\n\n\nconst NewAttribute: React.FC<{ input: InputElement; nested: string }> = ({\n    input,\n    nested,\n}) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const saveValue = () => sc.dispatch({\n        type: 'REPLACE_NEW_ATTRIBUTE', nested, input, name: inputRef.current!.value,\n    })\n    const deleteAttr = () => sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: '' })\n\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                saveValue()\n                break\n            }\n            case 'Escape': {\n                deleteAttr()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    React.useEffect(() => {\n        inputRef.current!.focus()\n    }, [])\n\n    return (\n        <label>\n            <input\n                ref={inputRef}\n                defaultValue=''\n                onBlur={saveValue}\n            />\n            <span className=\"value\" />\n            <button onClick={deleteAttr} className='del-attr'>\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\n\nconst EditAttribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string\n}> = ({ input, nested, attributeName }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    useKeyPress(['Enter', 'Tab'], (ev) => {\n        ev.preventDefault()\n        sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    }, { target: inputRef })\n    React.useEffect(() => {\n        const attrs = Object.keys(input.data[nested])\n        if (attributeName === attrs[attrs.length - 1]) {\n            inputRef.current!.focus()\n        }\n    }, [])\n    return (\n        <label>\n            <span>{attributeName}:</span>\n            <input\n                ref={inputRef}\n                className=\"value\"\n                value={input.data[nested][attributeName] || ''}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: input,\n                    patch: { [nested]: { [attributeName]: value } },\n                })}\n            />\n            <button\n                onClick={() => {\n                    sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: attributeName })\n                }}\n                className='del-attr'\n            >\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\nconst Attribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string,\n}> = ({ input, nested, attributeName }) => {\n    if ('' === attributeName) {\n        return <NewAttribute nested={nested} input={input} />\n    }\n    return <EditAttribute nested={nested} attributeName={attributeName} input={input} />\n}\n\n\nconst Options: React.FC<{\n    label: string, input: InputElement, nested: string,\n}> = ({ label, input, nested }) => {\n    const sc = useStoreContext()\n    const options = input.data[nested]\n    if (!options) {\n        return null\n    }\n    const addAttribute = () => sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    const optionNames = Object.keys(options)\n    return (\n        <fieldset className='options'>\n            <legend>{label}:</legend>\n            <div className='controls'>\n                <button onClick={addAttribute} className='add-attr'>\n                    +\n                </button>\n            </div>\n            {optionNames.length > 0 && (\n                <div className=\"heading\">\n                    <span>ID</span>\n                    <span>Value</span>\n                </div>)}\n            {optionNames.map(attrName => (\n                <Attribute\n                    key={attrName}\n                    nested={nested}\n                    input={input}\n                    attributeName={attrName}\n                />\n            ))}\n        </fieldset>\n    )\n}\n\nconst InputEdit: React.FC<{ input: InputElement }> = ({ input }) => {\n    const sc = useStoreContext()\n    const { data } = input\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: input, patch })\n\n    return (\n        <div>\n            <h4 className=\"title\">Edit {input.control.name}</h4>\n            <label>\n                <span>Label:</span>\n                <input\n                    className=\"value\"\n                    value={data.label || ''}\n                    onChange={({ target: { value } }) => dp({ label: value })}\n                />\n            </label>\n            <label>\n                <span>Name:</span>\n                <input\n                    className=\"value\"\n                    value={data.name || ''}\n                    onChange={({ target: { value } }) => dp({ name: value })}\n                />\n            </label>\n            <label>\n                <span>Class:</span>\n\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n\n            <Options input={input} label=\"Options\" nested=\"options\" />\n\n            <fieldset>\n                <legend>Other Class Names:</legend>\n                <label>\n                    <span>Wrapper:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.wrapper || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { wrapper: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Label:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.label || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { label: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Input:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.input || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { input: value } })\n                        }\n                    />\n                </label>\n            </fieldset>\n\n\n            <Options input={input} label=\"Attributes\" nested=\"attributes\" />\n\n        </div>\n    )\n}\n\nconst ContainerEdit: React.FC<{ container: Container }> = ({ container }) => {\n    const sc = useStoreContext()\n    const { data } = container\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: container, patch })\n\n    return (\n        <div>\n            <h4 className=\"title\">Edit {container.control.name} container</h4>\n            <label>\n                <span>Class:</span>\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n\n        </div>\n    )\n}\n\nconst TextHeadingSize: React.FC<{\n    txt: TextElement\n    onChange: (value: string) => void\n}> = ({ txt, onChange }) => {\n    if (txt.control.id !== 'heading') {\n        return null\n    }\n    return (\n        <label>\n            <span>Size:</span>\n            <select value={txt.data.tag} onChange={ev => onChange(ev.target.value)}>\n                <option value=\"h1\">Heading 1</option>\n                <option value=\"h2\">Heading 2</option>\n                <option value=\"h3\">Heading 3</option>\n                <option value=\"h4\">Heading 4</option>\n                <option value=\"h5\">Heading 5</option>\n                <option value=\"h6\">Heading 6</option>\n            </select>\n        </label>\n    )\n}\n\nconst TextEdit: React.FC<{ control: TextElement }> = ({ control }) => {\n    const sc = useStoreContext()\n    const { data } = control\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: control, patch })\n\n    return (\n        <div>\n            <h4 className=\"title\">Edit text</h4>\n            <label>\n                <span>Text:</span>\n\n                <textarea\n                    id={control.id}\n                    value={data.text || ''}\n                    onChange={({ target: { value } }) => dp({ text: value })}\n                />\n            </label>\n            <TextHeadingSize\n                txt={control}\n                onChange={(tag:string) => dp({ tag })}\n\n            />\n            <label>\n                <span>Class:</span>\n\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n        </div>\n    )\n}\n\n\nconst Edit: React.FC<{ target: Element }> = ({ target }) => {\n    if (isContainer(target)) {\n        return <ContainerEdit container={target} />\n    }\n    if (isInput(target)) {\n        return <InputEdit input={target} />\n    }\n    if (isText(target)) {\n        return <TextEdit control={target} />\n    }\n    return null\n}\n\n\nconst EditPanelEl = styled.div<{ editing: boolean }>(({ editing }) => ({\n    position: 'absolute',\n    height: '100%',\n    width: '400px',\n    background: 'white',\n    right: editing ? '0' : '-420px',\n    transition: 'right 0.3s ease-in-out',\n    display: 'flex',\n    boxShadow: '-5px 0px 5px 0px rgba(50, 50, 50, 0.75)',\n\n    '.title': {\n        margin: '15px 0',\n        borderBottom: '1px solid lightgray',\n        paddingBottom: '10px',\n    },\n    '.edit-pane': {\n        flex: 1,\n        overflowY: 'auto',\n        padding: '10px',\n    },\n    '.footer': {\n        padding: '10px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        borderTop: '1px solid lightGrey',\n    },\n    legend: {\n        backgroundColor: '#000',\n        color: '#fff',\n        padding: '3px 6px',\n        fontSize: '16px',\n    },\n    'label, .heading': {\n        display: 'flex',\n        marginBottom: '5px',\n        '> *:first-child': {\n            width: '125px',\n        },\n    },\n    '.heading > *': {\n        fontWeight: 'bold',\n    },\n    '.value': {\n        minWidth: '150px',\n        flex: 1,\n    },\n    button: {\n        marginLeft: '1rem',\n        svg: {\n            height: '18px',\n        },\n    },\n    fieldset: {\n        marginTop: '1rem',\n        '.controls': {\n            display: 'flex',\n\n            justifyContent: 'flex-end',\n            '.add-attr': {\n                border: 0,\n                padding: '0 5px',\n            },\n        },\n    },\n    textarea: {\n        width: '100%',\n        minHeight: '50px',\n        padding: '4px',\n    },\n    '.widths': {\n        '.row': {\n            display: 'flex',\n            justifyContent: 'space-between',\n            span: {\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                marginRight: '10px',\n                width: 'inherit',\n            },\n        },\n    },\n}))\n\nexport const EditPanel = () => {\n    const sc = useStoreContext()\n    const panelRef = React.useRef<HTMLDivElement>(null)\n    const { editing } = sc.store\n    React.useEffect(() => {\n        if (editing && panelRef.current) {\n            const firstInput = panelRef.current.querySelector('input,textarea')\n            if (firstInput) {\n                setTimeout(() => { // setTimeout to focus after animation completes\n                    (firstInput as HTMLInputElement).focus()\n                }, 250)\n            }\n        }\n    }, [editing])\n    return (\n        <EditPanelEl editing={!!editing}>\n            <div ref={panelRef} className='edit-pane'>\n                {editing && <Edit target={editing} />}\n            </div>\n            <div className='footer'>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => sc.dispatch({ type: 'HIDE_EDIT' })}\n                >\n                    Done\n                </button>\n            </div>\n        </EditPanelEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\nimport { ControlsListing } from './editor/controls'\nimport { useProvidedStoreContext, StoreContext, Form } from './editor/store'\nimport { FormElements } from './editor/form'\nimport { EditPanel } from './editor/edit-panel'\nimport { SerializedForm } from './data'\n\nconst FormPanelEl = styled.div({\n    display: 'flex',\n    width: '100%',\n    overflow: 'scroll',\n})\nconst FormPanel = () => {\n    return (\n        <FormPanelEl>\n            <FormElements />\n        </FormPanelEl>\n    )\n}\n\nconst EditorEl = styled.div({\n    display: 'grid',\n    gridTemplateColumns: '1fr 200px',\n    gridTemplateRows: '1fr',\n    height: '100%',\n    gap: '10px',\n    position: 'relative',\n    overflow: 'hidden',\n    '> *': {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n})\n\nexport interface EditorProps {\n    className?: string\n    onChange?(form: Form): void\n    defaultValue?: SerializedForm\n    value?: SerializedForm\n}\n\nexport const Editor:React.FC<EditorProps> = ({\n    className, onChange, value, defaultValue,\n}) => {\n    const ctx = useProvidedStoreContext(defaultValue)\n    React.useEffect(() => {\n        ctx.dispatch({ type: 'REPLACE', form: value })\n    }, [value])\n    React.useEffect(() => {\n        if (onChange) { onChange(ctx.store.form) }\n    }, [onChange, ctx.store])\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <StoreContext.Provider value={ctx}>\n                <EditorEl className={className}>\n                    <FormPanel />\n                    <ControlsListing />\n                    <EditPanel />\n                </EditorEl>\n            </StoreContext.Provider>\n        </DndProvider>\n    )\n}\n","import cx from 'classnames'\nimport {\n    SerializedForm,\n    isSerializedText,\n    isSerializedForm,\n    isSerializedInput,\n    SerializedElement,\n    SerializedContainer,\n    isSerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement,\n} from './data'\n\n\ninterface UnserializeOptions {\n    parent?: Container\n}\n\nclass Element {\n\n    data: SerializedElement\n    options: UnserializeOptions\n\n    constructor(data: SerializedElement, options: UnserializeOptions) {\n        this.data = data\n        this.options = options\n    }\n\n    el?:HTMLElement\n\n    createElement():HTMLElement {\n        return document.createElement('div')\n    }\n\n    get columnSmWidth():number {\n        if (this.options.parent instanceof Container && this.options.parent.isBSRow) {\n            return Math.round(12 / this.options.parent.children.length)\n        }\n        return 0\n    }\n\n    render(root:HTMLElement, skipAttributes = false) {\n        if (!this.el) {\n            this.el = this.createElement()\n        }\n        this.setAttributes({\n            'data-control': this.data.type,\n            'data-id': this.data.id,\n            class: cx(this.data.className, {\n                [`col-sm-${this.columnSmWidth}`]: this.columnSmWidth !== 0,\n            }),\n        })\n\n        if (!skipAttributes) {\n            this.setAttributes()\n        }\n\n        if (this.el.parentElement !== root) {\n            root.appendChild(this.el)\n        }\n        return this\n    }\n\n    setAttributes(\n        attrs = this.data.attributes,\n        el:HTMLElement|undefined = this.el,\n    ) {\n        if (!el || !attrs) {\n            return\n        }\n        Object.keys(attrs).forEach((k) => {\n            if (k) {\n                el.setAttribute(k, String(attrs[k]))\n            }\n        })\n    }\n\n}\n\nclass TextElement extends Element {\n\n    data: SerializedTextElement\n\n    constructor(data: SerializedTextElement, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n    }\n\n    createElement():HTMLElement {\n        return document.createElement(this.data.tag)\n    }\n\n    render(root:HTMLElement) {\n        super.render(root)\n        this.el!.innerText = this.data.text\n        return this\n    }\n\n}\n\nclass InputElement extends Element {\n\n    data: SerializedInputElement\n    label?: HTMLLabelElement\n    input?: HTMLElement\n\n    constructor(data: SerializedInputElement, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n    }\n\n\n    render(root:HTMLElement) {\n        super.render(root, true)\n\n        this.setAttributes({\n            'data-type': this.data.control,\n            class: cx(this.data.className, {\n                [`col-sm-${this.columnSmWidth}`]: this.columnSmWidth !== 0,\n            }),\n        })\n\n        if (!this.input) {\n            const renderer = this[`_${this.data.control}`]\n            if (renderer) {\n                const input =  renderer.apply(this)\n                this.input = input as HTMLElement\n                // this.input.className = this.data.classNames.input\n                // this.input.id = this.data.id\n                this.el!.appendChild(this.input)\n            }\n        }\n        return this\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    createInput(tag: string) {\n        const float = document.createElement('div')\n        float.className = this.data.classNames.wrapper\n\n        const input = document.createElement(tag)\n\n        this.setAttributes({\n            name: this.data.name,\n            id: this.data.id,\n            class: 'form-control',\n            placeholder: this.data.label,\n            ...this.data.attributes,\n        }, input)\n\n        float.appendChild(input)\n\n        const label = document.createElement('label')\n        label.innerText = this.data.label\n        this.setAttributes({\n            for: this.data.id,\n\n        }, label)\n        float.appendChild(label)\n\n        return float\n    }\n\n    _textarea() {\n        return this.createInput('textarea')\n    }\n\n    _input() {\n        return this.createInput('input')\n    }\n\n    renderOptions(cb: (a:string, b:string) => { [k:string]: string }) {\n        const wrapper = document.createElement('div')\n        this.setAttributes(this.data.attributes, wrapper)\n        wrapper.className = this.data.classNames.wrapper\n\n        const labelTitle = document.createElement('label')\n        labelTitle.innerText = this.data.label\n        wrapper.appendChild(labelTitle)\n\n        this.optionPairs.forEach(([optId, optValue]) => {\n            const { id, inputType, name, value, label } = cb(optId, optValue)\n            const inputId = `${id}-${this.data.id}`\n\n            const option = document.createElement('label')\n            this.setAttributes({ class: 'form-check' }, option)\n\n            const input = document.createElement('input')\n            this.setAttributes({\n                class: 'form-check-input',\n                'data-id': id,\n                type: inputType,\n                name,\n                value,\n                id: inputId,\n            }, input)\n            option.appendChild(input)\n\n            const labelEl = document.createElement('span')\n            this.setAttributes({\n                className: 'form-check-label',\n            }, labelEl)\n            labelEl.innerText = label\n            option.appendChild(labelEl)\n\n            wrapper.appendChild(option)\n        })\n        return wrapper\n    }\n\n    _radio() {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'radio',\n            name: this.data.name,\n            id,\n            value,\n            label: value,\n        }))\n    }\n\n    _checkbox(): HTMLDivElement {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'checkbox',\n            name: id,\n            value,\n            id,\n            label: value,\n        }))\n    }\n\n    _select(): HTMLDivElement {\n        const wrapper = document.createElement('div')\n        wrapper.className = 'form-floating'\n\n        const select = document.createElement('select')\n        this.setAttributes({\n            name: this.data.name,\n            class: 'form-select',\n            id: this.data.id,\n        }, select)\n\n        this.optionPairs.forEach(([value, label]) => {\n            const option = document.createElement('option')\n            this.setAttributes({ value }, option)\n            option.innerText = label\n            select.appendChild(option)\n        })\n\n        wrapper.appendChild(select)\n\n        const label = document.createElement('label')\n        this.setAttributes({\n            for: this.data.id,\n        }, label)\n        label.innerText = this.data.label\n\n        wrapper.appendChild(label)\n\n        return wrapper\n    }\n\n}\n\n\nclass Container extends Element {\n\n    children: Array<Element>\n\n    data: SerializedContainer\n    constructor(data: SerializedContainer, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n        this.children = data.children\n            .map(c => unserialize(c, { parent: this }))\n            .filter(Boolean) as Array<Element>\n    }\n\n    get isBSRow() {\n        // counter intuitively, a bootstrap row is laid out in columns\n        return this.data.direction === 'column'\n    }\n\n    render(root:HTMLElement) {\n        super.render(root)\n\n        this.el!.className = cx(this.el?.className, {\n            row: this.isBSRow, // a bootstrap row lays out in columns\n            'd-flex flex-column': !this.isBSRow,\n            'formial-form': this.data.type == 'FORM'\n        })\n        this.children.forEach(c => c.render(this.el!))\n        return this\n    }\n\n}\n\nconst unserialize = (data: SerializedElement, options: UnserializeOptions = {}):Element => {\n    if (isSerializedText(data)) {\n        return new TextElement(data, options)\n    }\n\n    if (isSerializedContainer(data) || isSerializedForm(data)) {\n        return new Container(data, options)\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(data, options)\n    }\n\n    return new Element(data, options)\n}\n\nexport const findField = (el: any, id: string): SerializedElement | null => {\n    if (el.id === id) {\n        return el\n    }\n    if (Array.isArray(el.children)) {\n        for (const child of el.children) {\n            const match = findField(child, id)\n            if (match) {\n                return match\n            }\n        }\n    }\n    return null\n}\n\nexport const render = (root: HTMLElement, form: SerializedForm) => {\n    root.innerHTML = ''\n    const tree = unserialize(form)\n    if (tree) {\n        tree.render(root)\n    }\n}\n","import React from 'react'\nimport { Editor, Container, render } from 'formial'\n\nconst DEFAULT = {\"id\":\"4f78521b-59a8-4069-8ae8-8b0c793d9f5e\",\"type\":\"FORM\",\"control\":\"col\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"5421839e-6592-4c7b-aea6-72dd889f2354\",\"type\":\"TEXT\",\"control\":\"heading\",\"tag\":\"h3\",\"text\":\"Hello!\",\"className\":\"\"},{\"id\":\"31650e8e-a0ee-4c2b-a35d-5d5c344fabd0\",\"type\":\"TEXT\",\"control\":\"para\",\"tag\":\"p\",\"text\":\"Tell us something about yourself\",\"className\":\"\"},{\"id\":\"e22f3d00-6d2a-4f26-a813-e5581636ae77\",\"type\":\"CONTAINER\",\"control\":\"col\",\"className\":\"\",\"direction\":\"column\",\"children\":[{\"id\":\"2f6ada7b-28bb-4a8a-a318-553fd357717b\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"fe50d0bb-ed56-4870-a79c-2a9cf03eacd8\",\"type\":\"INPUT\",\"control\":\"input\",\"label\":\"What's your name?\",\"className\":\"mb-2\",\"name\":\"input-5597\",\"classNames\":{\"wrapper\":\"form-floating\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{}},{\"id\":\"70353b38-ff98-46f6-91af-846aeb1881d0\",\"type\":\"INPUT\",\"control\":\"textarea\",\"label\":\"What do you like?\",\"className\":\"flex-fill\",\"name\":\"textarea-2452\",\"classNames\":{\"wrapper\":\"form-floating mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{}}]},{\"id\":\"2b9bed3e-647e-4559-b60e-6e8b6a2427f7\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"80a4df1f-d041-4f9b-b1fc-cd68964a6e7d\",\"type\":\"INPUT\",\"control\":\"checkbox\",\"label\":\"Fruits you like\",\"className\":\"\",\"name\":\"checkbox-10613\",\"classNames\":{\"wrapper\":\"form-control mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"Bannana\",\"2\":\"Orange\",\"3\":\"Mango\"}},{\"id\":\"233acef5-b749-4478-8179-142c5635d181\",\"type\":\"INPUT\",\"control\":\"radio\",\"label\":\"How Many Cats?\",\"className\":\"\",\"name\":\"radio-7972\",\"classNames\":{\"wrapper\":\"form-control mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"one\",\"2\":\"two\",\"3\":\"three\"}},{\"id\":\"7e7af9f4-1e35-4c4b-af81-e52b9ff7b245\",\"type\":\"INPUT\",\"control\":\"select\",\"label\":\"Pick a number\",\"className\":\"\",\"name\":\"select-2778\",\"classNames\":{\"wrapper\":\"form-floating mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"4\":\"four\",\"5\":\"five\"}}]}]}]\n}\n\n\nconst App = () => {\n    const [value, setValue] = React.useState<Container>()\n    const htmlRef = React.useRef(null)\n\n    const onChange = (container: Container) => setValue(container)\n\n    const renderHTML = () => {\n        // json would normally be saved.\n        // It's intended to be loading back into the editor or rendered to a form\n        const json = value!.serialize()\n        console.log(JSON.stringify(json))\n        render(htmlRef.current!, json)\n    }\n\n    return (\n        <div id=\"example-builder\">\n            <Editor onChange={onChange} defaultValue={DEFAULT}  />\n            <hr />\n            <div><button onClick={renderHTML}>Render</button></div>\n            <hr />\n            <div ref={htmlRef}></div>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}