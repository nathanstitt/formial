{"version":3,"sources":["../../src/lib.ts","../../src/data.ts","../../src/editor/store.ts","../../src/editor/default-controls.tsx","../../src/editor/components.tsx","../../src/editor/controls.tsx","../../src/hooks/use-key-press.ts","../../src/editor/edit-panel.tsx","../../src/hooks/use-click-outside.ts","../../src/editor/sidebar.tsx","../../src/editor/editable-text.tsx","../../src/editor/form.tsx","../../src/editor.tsx","../../src/render.ts","App.tsx","index.tsx"],"names":["uuidv4","replace","r","Math","c","v","isSerializedInput","toBeDetermined","isSerializedContainer","isSerializedText","isSerializedForm","Element","constructor","control","data","this","deepmerge","className","id","type","Container","options","children","map","direction","Form","cm","col","Error","TextElement","tag","text","InputElement","label","name","classNames","wrapper","input","attributes","placeholder","Object","key","Control","definition","isContainer","isInput","isText","RowControl","TextControl","ColumnControl","defaultControls","registered","register","controls","sc","React","useStoreContext","useStore","unserialize","dataChildren","child","storeReducer","st","action","store","fromContainer","fromIndex","element","destIndex","cntrl","console","container","addElement","form","e","editing","target","undefined","initStore","defaultValue","Map","useProvidedStoreContext","useStoreReducer","dispatch","renderOptions","el","rend","icon","h","para","readOnly","hasOptions","n","value","Title","borderBottom","padding","Scrolling","flexGrow","overflow","minHeight","paddingRight","Values","flex","display","flexDirection","ControlLabelEl","cursor","backgroundColor","listStyle","margin","userSelect","border","svg","height","marginRight","ControlLabel","useDrag","item","collect","monitor","opacity","ref","drag","style","ControlsEl","styled","Controls","Array","defaultOptions","useKeyPress","keys","callback","opts","keyList","useMemo","callbackRef","useRef","useEffect","handle","useCallback","identifier","window","targetNode","CanFocusContext","createContext","NewAttribute","nested","canFocus","useContext","inputRef","saveValue","deleteAttr","ev","onBlur","onClick","EditAttribute","attributeName","attrs","onChange","patch","Attribute","Options","optionNames","attrName","InputEdit","dp","ContainerEdit","TextHeadingSize","txt","TextEdit","Edit","EditPanelEl","background","overflowY","justifyContent","borderTop","legend","color","fontSize","marginBottom","width","fontWeight","minWidth","button","marginLeft","fieldset","marginTop","textarea","span","EditPanel","handler","useState","panelRef","listener","event","document","setCanFocus","setTimeout","firstInput","SidebarEl","ul","Sidebar","EditableText","props","wrapperRef","textRef","onUpdated","onTextSaved","setIsInputActive","setInputValue","isInputActive","edit","handleInputChange","handleSpanClick","s","range","position","startOffset","cn","size","inputValue","DropEl","transition","HorizontalDropEl","useFormDrop","useDrop","accept","isHovered","drop","dropRef","HorizonontalDrop","VerticalDropEl","VerticalDrop","ElementPreviewEl","alignItems","boxShadow","outline","borderColor","zIndex","top","right","borderRadius","borderBottomLeftRadius","flexWrap","ControlPreview","InputPreview","TextPreview","updated","textValue","ContainerPreviewEl","left","borderTopRightRadius","borderTopLeftRadius","borderBottomWidth","writingMode","textOrientation","ContainerPreview","index","Drop","preview","empty","parent","i","ElementPreview","FormElementsEl","justifyItems","boxSizing","FormElements","canDrop","FormPanelEl","FormPanel","EditorEl","gridTemplateColumns","gridTemplateRows","gap","Editor","ctx","backend","HTML5Backend","StoreContext","skipAttributes","class","cx","columnSmWidth","parentElement","root","k","String","renderer","float","for","createInput","labelTitle","cb","optId","inputId","option","labelEl","inputType","select","row","DEFAULT","App","setValue","htmlRef","href","json","serialize","log","JSON","stringify","tree","render","current","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.d74cc341.chunk.js","sourcesContent":["// uses Math.random which may only be pseudo random\nexport function uuidv4():string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","\nexport interface SerializedElement {\n    type: string\n    id: string\n    control: string\n    className: string\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedInputElement extends SerializedElement {\n    type: string\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedTextElement extends SerializedElement {\n    tag: string\n    text: string\n}\n//  id: string; type: string; control: string;   tag: string; text: string;\n\nexport type ElementSerialization =\n    | SerializedForm\n    | SerializedElement\n    | SerializedContainer\n    | SerializedTextElement\n    | SerializedInputElement\n\n\nexport interface SerializedContainer extends SerializedElement {\n    direction: string // 'row' | 'column'\n    children: Array<ElementSerialization>\n}\n\nexport interface SerializedForm extends SerializedContainer {\n\n}\n\nexport function isSerializedInput(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedInputElement { return (toBeDetermined.type === 'INPUT') }\n\nexport function isSerializedContainer(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedContainer { return (toBeDetermined.type === 'CONTAINER') }\n\nexport function isSerializedText(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedTextElement { return (toBeDetermined.type === 'TEXT') }\n\nexport function isSerializedForm(\n    toBeDetermined: any\n): toBeDetermined is SerializedForm { return (toBeDetermined.type === 'FORM') }\n\n","import * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport { uuidv4 } from '../lib'\nimport {\n    SerializedForm,\n    SerializedElement,\n    SerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement,\n    isSerializedText,\n    isSerializedContainer,\n    isSerializedInput,\n    ElementSerialization,\n} from '../data'\n\nexport interface ControlDefinition {\n    id: string\n    icon: React.ReactNode\n    name: string\n    placeholder?(element: Element): React.ReactNode\n    hasOptions?: boolean\n}\n\ntype ControlsMap = Map<string, Control>\n\nexport interface Store {\n    controls: ControlsMap,\n    form: Form\n    editing?: Element\n}\n\nexport interface ElementData {\n    className: string\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nexport class Element {\n\n    id: string\n    control: Control\n    data: ElementData\n    constructor(control: Control, data:any = {}) {\n        this.control = control\n        this.id = data.id || uuidv4()\n        this.data = deepmerge({\n            className: '',\n        }, data)\n    }\n\n    serialize(): SerializedElement {\n        return {\n            id: this.id,\n            type: 'element',\n            control: this.control.id,\n            ...this.data,\n        }\n    }\n\n}\n\n\ninterface ContainerData extends ElementData {\n    children: Array<Element>\n}\n\n\nexport interface ContainerOptions {\n    id?: string\n    direction: string // 'row' | 'column'\n    data?: ContainerData\n    children?: Array<Element>\n}\n\ntype ContainerChild = Element|TextElement|Container|InputElement\n\nexport class Container extends Element {\n\n    direction: string // 'row' | 'column'\n    children: Array<ContainerChild>\n    constructor(control:Control, options: ContainerOptions) {\n        super(control, options)\n        this.direction = options.direction || 'row'\n        this.children = options.children || []\n    }\n\n    get isRow(): boolean {\n        return this.direction === 'row'\n    }\n\n    serialize(): SerializedContainer {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            children: this.children.map(c => c.serialize()),\n            direction: this.direction,\n            type: 'CONTAINER',\n        }\n    }\n\n}\n\nexport class Form extends Container {\n\n    constructor(cm: ControlsMap, options?: ContainerOptions) {\n        const col = cm.get('col')\n        if (!col) { throw new Error(\"Column control doesn't exist?\") }\n        super(col, { ...options, direction: 'row' })\n    }\n\n    serialize(): SerializedForm {\n        return {\n            ...super.serialize(),\n            type: 'FORM',\n        }\n    }\n\n}\n\ninterface TextData extends ElementData {\n    tag: string\n    text: string\n}\n\nexport class TextElement extends Element {\n\n    data: TextData\n\n    constructor(control:Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge.all([{\n            tag: control.id === 'para' ? 'p' : 'h3',\n            text: 'Some text…',\n            className: '',\n        }, data]) as TextData\n    }\n\n    serialize(): SerializedTextElement {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            type: 'TEXT',\n        }\n    }\n\n}\n\nexport interface InputData extends ElementData {\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\n\nexport class InputElement extends Element {\n\n    data: InputData\n\n    constructor(control: Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge({\n            label: `${this.control.name} label`,\n            className: 'mb-2',\n            name: `${this.control.id}-${Math.round(Math.random() * 9999) + 1000}`,\n            classNames: {\n                wrapper: this.wrapperClassName,\n                label: '',\n                input: 'form-control',\n            },\n            attributes: {},\n        }, data)\n        if (control.hasOptions && !this.data.options) {\n            this.data.options = {}\n        }\n    }\n\n    get wrapperClassName() {\n        switch (this.control.id) {\n            case 'input':\n            case 'textarea':\n            case 'select': {\n                return 'form-floating'\n            }\n        }\n        return 'form-control'\n    }\n\n    get placeholder(): React.ReactNode {\n        return (this.control.placeholder && this.control.placeholder(this)) || null\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    serialize(): SerializedInputElement {\n        return {\n            ...super.serialize(),\n            ...this.data,\n            type: 'INPUT',\n        }\n    }\n\n}\n\n\nexport class Control implements ControlDefinition {\n\n    id: string\n    name: string\n    icon: React.ReactNode\n\n    hasOptions?: boolean\n    placeholder?: (element: Element) => React.ReactNode\n\n    constructor(definition: ControlDefinition) {\n        this.name = definition.name\n        this.id = definition.id\n        this.icon = definition.icon\n        this.placeholder = definition.placeholder\n        this.hasOptions = definition.hasOptions\n    }\n\n    createElement(): Element {\n        return new InputElement(this)\n    }\n\n}\n\nexport function isContainer(\n    toBeDetermined: any,\n): toBeDetermined is Container {\n    return (toBeDetermined instanceof Container)\n}\n\nexport function isInput(\n    toBeDetermined: any,\n): toBeDetermined is InputElement {\n    return (toBeDetermined instanceof InputElement)\n}\n\nexport function isText(\n    toBeDetermined: any,\n): toBeDetermined is TextElement {\n    return (toBeDetermined instanceof TextElement)\n}\n\nexport class RowControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { direction: 'row' })\n    }\n\n}\n\nexport class TextControl extends Control {\n\n    createElement(): Element {\n        return new TextElement(this)\n    }\n\n}\n\nexport class ColumnControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { direction: 'column' })\n    }\n\n}\n\nexport const defaultControls = {\n    registered: new Map<string, Control>(),\n\n    register(controls: Array<Control>) {\n        controls.forEach(c => this.registered.set(c.id, c))\n    },\n}\n\ninterface InsertElementOptions {\n    id: string,\n    container: Container, destIndex: number,\n    fromIndex?: number, fromContainer?: Container\n}\nexport function addElement(\n    store: Store,\n    {\n        id, container, destIndex, fromIndex, fromContainer,\n    }: InsertElementOptions,\n): Store {\n    let cntrl: Control | undefined\n    let element: Element | undefined\n\n    if (fromIndex != null && fromContainer) {\n        element = fromContainer.children[fromIndex]\n        fromContainer.children.splice(fromIndex, 1)\n        if (fromContainer === container && fromIndex < destIndex) {\n            destIndex -= 1 // eslint-disable-line no-param-reassign\n        }\n    } else {\n        cntrl = store.controls.get(id)\n        if (!cntrl) {\n            // eslint-disable-next-line no-console\n            console.warn(`attempted to drop id ${id} but no control exists`)\n            return store\n        }\n    }\n    if (!element && cntrl) {\n        element = cntrl.createElement()\n    }\n    if (element) {\n        container.children.splice(destIndex, 0, element)\n    }\n    return { ...store }\n}\n\ninterface StoreContext {\n    store: Store\n    dispatch: React.Dispatch<Action> //  (patch:any): void\n}\n\nconst sc = React.createContext(null as any as StoreContext)\nsc.displayName = 'StoreContext'\nexport const useStoreContext = ():StoreContext => React.useContext(sc)\n\nexport const useStore = ():Store => useStoreContext().store\n\nconst unserialize = (cm: ControlsMap, data: ElementSerialization):Element|null => {\n    const control = cm.get(data.control)\n    if (!control) { return null }\n\n    if (isSerializedText(data)) {\n        return new TextElement(control, data)\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(control, data)\n    }\n\n\n    const children:Array<ContainerChild> = []\n    const dataChildren = (data as any).children\n    if (dataChildren) {\n        dataChildren.forEach((c:ElementSerialization) => {\n            const child = unserialize(cm, c)\n            if (child) children.push(child)\n        })\n    }\n\n    if (isSerializedContainer(data)) {\n        return new Container(control, { ...data, children })\n    }\n\n    // if all else fails attempt to create a form and unserialize it\n    return new Form(cm, { ...data, children } as any as ContainerOptions)\n}\n\ntype Action =\n    | { type: 'REPLACE', form?: SerializedForm }\n    | { type: 'ADD_ELEMENT', id: string,\n        container: Container, destIndex: number,\n        fromIndex?: number, fromContainer?: Container }\n    | { type: 'DELETE', target: Element, container: Container }\n    | { type: 'UPDATE', target: Element, patch: any }\n    | { type: 'EDIT', target: Element }\n    | { type: 'HIDE_EDIT' }\n    | { type: 'ADD_ATTRIBUTE', input: InputElement, nested: string }\n    | { type: 'DELETE_ATTRIBUTE', input: InputElement, nested: string, name: string }\n    | { type: 'REPLACE_NEW_ATTRIBUTE', input: InputElement, nested: string, name: string, }\n\nconst storeReducer = (st:Store, action: Action): Store => {\n    switch (action.type) {\n        case 'ADD_ELEMENT': {\n            return addElement(st, action)\n        }\n        case 'REPLACE': {\n            if (action.form) {\n                const form = unserialize(st.controls, action.form)\n                if (form && form instanceof Form) {\n                    return { ...st, form }\n                }\n            }\n            return st\n        }\n        case 'DELETE': {\n            action.container.children = [\n                ...action.container.children.filter(e => e.id !== action.target.id),\n            ]\n            return { ...st }\n        }\n        case 'UPDATE': {\n            action.target.data = deepmerge(action.target.data as any, action.patch)\n            return { ...st }\n        }\n        case 'EDIT': {\n            return { ...st, editing: action.target }\n        }\n        case 'HIDE_EDIT': {\n            return { ...st, editing: undefined }\n        }\n        case 'ADD_ATTRIBUTE': {\n            action.input.data[action.nested][''] = ''\n            return { ...st }\n        }\n        case 'REPLACE_NEW_ATTRIBUTE': {\n            delete action.input.data[action.nested]['']\n            action.input.data[action.nested][action.name] = ''\n            return { ...st }\n        }\n        case 'DELETE_ATTRIBUTE': {\n            delete action.input.data[action.nested][action.name]\n            return { ...st }\n        }\n    }\n    return st\n}\n\nexport const initStore = (defaultValue?: SerializedForm):Store => {\n    const store = Object.create(null)\n    store.controls = new Map(defaultControls.registered)\n    store.form = defaultValue ? unserialize(store.controls, defaultValue)\n        : new Form(store.controls, defaultValue)\n\n    // store.elements.push(store.controls.get('select')!.createElement());\n    // [store.editing] = store.elements\n\n    return store\n}\n\nexport const useStoreReducer = (defaultValue?: SerializedForm) => (\n    React.useReducer(storeReducer, defaultValue, initStore)\n)\n\nexport const useProvidedStoreContext = (defaultValue?: SerializedForm):StoreContext => {\n    const [store, dispatch] = useStoreReducer(defaultValue)\n\n    return React.useMemo<StoreContext>(() => ({ store, dispatch }), [store])\n}\n\nexport { sc as StoreContext, unserialize }\n","import * as React from 'react'\nimport { CaretSquareDown } from '@styled-icons/fa-regular/CaretSquareDown'\nimport { Font } from '@styled-icons/fa-solid/Font'\nimport { GripLines } from '@styled-icons/fa-solid/GripLines'\nimport { Square } from '@styled-icons/fa-regular/Square'\nimport { Heading } from '@styled-icons/fa-solid/Heading'\nimport { Paragraph } from '@styled-icons/fa-solid/Paragraph'\nimport { GripLinesVertical } from '@styled-icons/fa-solid/GripLinesVertical'\nimport { DotCircle } from '@styled-icons/fa-solid/DotCircle'\nimport { CheckSquare } from '@styled-icons/fa-solid/CheckSquare'\n\nimport {\n    Control, RowControl, ColumnControl, InputElement, TextControl, TextElement, defaultControls,\n} from './store'\n\ntype RenderT = (key: string, value: string) => React.ReactNode\n\nconst renderOptions = (el: InputElement, rend: RenderT) => {\n    const options = el.optionPairs\n    if (options.length === 0) {\n        return rend('', '')\n    }\n    return options.map(([name, label]) => (\n        <label key={name}>{rend(name, label)}<span>{label}</span></label>\n    ))\n}\n\n\ndefaultControls.register([\n    new TextControl({\n        id: 'heading',\n        name: 'Heading',\n        icon: <Heading />,\n        placeholder(h:TextElement) { return React.createElement(h.data.tag, h.data.text) },\n    }),\n\n    new TextControl({\n        id: 'para',\n        name: 'Paragraph',\n        icon: <Paragraph />,\n        placeholder(para:TextElement) { return <p>{para.data.text}</p> },\n    }),\n\n    new Control({\n        id: 'input',\n        name: 'Text Input',\n        icon: <Font />,\n        placeholder() { return <input type='text' className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'textarea',\n        name: 'Text Area',\n        icon: <Square />,\n        placeholder() { return <textarea className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'checkbox',\n        name: 'Checkboxes',\n        icon: <CheckSquare />,\n        hasOptions: true,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input type=\"checkbox\" name={n} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'radio',\n        name: 'Radio Input',\n        hasOptions: true,\n        icon: <DotCircle />,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input key={n} type=\"radio\" name={el.data.name} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'select',\n        name: 'Select',\n        hasOptions: true,\n        icon: <CaretSquareDown />,\n        placeholder(el: InputElement) {\n            const options = el.optionPairs\n            return (\n                <select name={el.data.name}>\n                    {options.map(([v, l]) => (\n                        <option key={v} value={v}>{l}</option>\n                    ))}\n                </select>\n            )\n        },\n    }),\n    new RowControl({\n        id: 'row',\n        name: 'Row',\n        icon: <GripLines />,\n    }),\n    new ColumnControl({\n        id: 'col',\n        name: 'Column',\n        icon: <GripLinesVertical />,\n    }),\n])\n","import styled from 'styled-components'\n//import * as React from 'react'\n\nexport const Title = styled.h4.attrs({\n    className: 'title',\n})({\n    borderBottom: '1px solid lightgray',\n    padding: '5px 0',\n})\n\nexport const Scrolling = styled.div({\n    flexGrow: 1,\n    overflow: 'auto',\n    minHeight: 0,\n    paddingRight: '10px',\n})\n\nexport const Values = styled.div({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    minHeight: 0,\n    overflow: 'hidden',\n})\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useDrag } from 'react-dnd'\nimport { useStore, ControlDefinition } from './store'\nimport './default-controls'\n\nimport { Title, Scrolling } from './components'\n\nconst ControlLabelEl = styled.li({\n    cursor: 'pointer',\n    backgroundColor: 'white',\n    listStyle: 'none',\n    margin: '5px',\n    padding: '10px',\n    userSelect: 'none',\n    border: '1px dashed #ddd',\n    svg: {\n        height: '20px',\n        marginRight: '0.5rem',\n    },\n})\n\nconst ControlLabel:React.FC<ControlDefinition> = ({ id, name, icon }) => {\n    const [{ opacity }, drag] = useDrag({\n        item: { id, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ControlLabelEl ref={drag} style={{ opacity }}>\n            {icon}\n            <span>{name}</span>\n        </ControlLabelEl>\n    )\n}\n\n\nconst ControlsEl = styled.div({\n\n    // '.listing': {\n    //     flex: 1,\n    //     overflow: 'auto',\n    // },\n})\n\nexport const Controls = () => {\n    const { editing, controls } = useStore()\n    if (editing) {\n        return null\n    }\n    return (\n        <ControlsEl>\n            <Title>Elements</Title>\n            <Scrolling className=\"listing\">\n                <ul>\n                    {Array.from(controls.values()).map(definition => (\n                        <ControlLabel key={definition.id} {...definition} />))}\n                </ul>\n            </Scrolling>\n        </ControlsEl>\n    )\n}\n\n","import { Ref, useEffect, useCallback, useRef, useMemo } from 'react'\n\n\ninterface Options {\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement>;\n}\n\nconst EVENT_NAME = 'keydown'\n\nconst defaultOptions = {\n\n\n}\n\n// hook from https://usehooks.com/useKeyPress/\nexport function useKeyPress(\n    keys: string | Array<string>,\n    callback: (e: KeyboardEvent) => any,\n    opts?: Options,\n): void {\n    const keyList: Array<string> = useMemo(() => {\n        if (Array.isArray(keys)) {\n            return keys\n        }\n        return [keys]\n    }, [keys])\n    const options = Object.assign({}, defaultOptions, opts) as any\n\n    const callbackRef = useRef<(e: KeyboardEvent) => any>(callback)\n    const { target } = options\n\n    useEffect(() => {\n        callbackRef.current = callback\n    })\n\n    const handle = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyList.some(identifier => e.key === identifier)) {\n                callbackRef.current(e)\n            }\n        },\n        [keyList],\n    )\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            const targetNode = target ? target.current : window\n            if (targetNode) {\n                targetNode.addEventListener(EVENT_NAME, handle)\n            }\n\n            return () => {\n                if (targetNode) {\n                    targetNode.removeEventListener(EVENT_NAME, handle)\n                }\n            }\n        }\n        return undefined\n    }, [keyList, target, callback])\n}\n","import React, { useContext, createContext, FC, useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport { useOnClickOutside } from '../hooks/use-click-outside'\nimport {\n    useStoreContext, InputElement, Element, Container, isContainer, isInput, isText, TextElement,\n} from './store'\nimport { useKeyPress } from '../hooks/use-key-press'\nimport { Title, Scrolling, Values } from './components'\n\nconst CanFocusContext = createContext<boolean>(false)\nCanFocusContext.displayName = 'FocusContext'\n\n\nconst NewAttribute: FC<{ input: InputElement; nested: string }> = ({\n    input,\n    nested,\n}) => {\n    const sc = useStoreContext()\n    const canFocus = useContext(CanFocusContext)\n    const inputRef = useRef<HTMLInputElement>(null)\n    const saveValue = () => sc.dispatch({\n        type: 'REPLACE_NEW_ATTRIBUTE', nested, input, name: inputRef.current!.value,\n    })\n    const deleteAttr = () => sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: '' })\n\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                saveValue()\n                break\n            }\n            case 'Escape': {\n                deleteAttr()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    useEffect(() => {\n        if (canFocus) {\n            inputRef.current!.focus()\n        }\n    }, [canFocus])\n\n    return (\n        <label>\n            <input\n                ref={inputRef}\n                defaultValue=''\n                onBlur={saveValue}\n            />\n            <span className=\"value\" />\n            <button onClick={deleteAttr} className='del-attr'>\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\n\nconst EditAttribute: FC<{\n    input: InputElement\n    nested: string\n    attributeName: string\n}> = ({ input, nested, attributeName }) => {\n    const sc = useStoreContext()\n    const canFocus = useContext(CanFocusContext)\n    const inputRef = useRef<HTMLInputElement>(null)\n    useKeyPress(['Enter', 'Tab'], (ev) => {\n        ev.preventDefault()\n        sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    }, { target: inputRef })\n    useEffect(() => {\n        const attrs = Object.keys(input.data[nested])\n        if (canFocus && attributeName === attrs[attrs.length - 1]) {\n            inputRef.current!.focus()\n        }\n    }, [canFocus])\n    return (\n        <label>\n            <span>{attributeName}:</span>\n            <input\n                ref={inputRef}\n                className=\"value\"\n                value={input.data[nested][attributeName] || ''}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: input,\n                    patch: { [nested]: { [attributeName]: value } },\n                })}\n            />\n            <button\n                onClick={() => {\n                    sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: attributeName })\n                }}\n                className='del-attr'\n            >\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\nconst Attribute: FC<{\n    input: InputElement\n    nested: string\n    attributeName: string,\n}> = ({ input, nested, attributeName }) => {\n    if ('' === attributeName) {\n        return <NewAttribute nested={nested} input={input} />\n    }\n    return <EditAttribute nested={nested} attributeName={attributeName} input={input} />\n}\n\n\nconst Options: FC<{\n    label: string, input: InputElement, nested: string,\n}> = ({ label, input, nested }) => {\n    const sc = useStoreContext()\n    const options = input.data[nested]\n    if (!options) {\n        return null\n    }\n    const addAttribute = () => sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    const optionNames = Object.keys(options)\n    return (\n        <fieldset className='options'>\n            <legend>{label}:</legend>\n            <div className='controls'>\n                <button onClick={addAttribute} className='add-attr'>\n                    +\n                </button>\n            </div>\n            {optionNames.length > 0 && (\n                <div className=\"heading\">\n                    <span>ID</span>\n                    <span>Value</span>\n                </div>)}\n            {optionNames.map(attrName => (\n                <Attribute\n                    key={attrName}\n                    nested={nested}\n                    input={input}\n                    attributeName={attrName}\n                />\n            ))}\n        </fieldset>\n    )\n}\n\nconst InputEdit: FC<{ input: InputElement }> = ({ input }) => {\n    const sc = useStoreContext()\n    const { data } = input\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: input, patch })\n\n    return (\n        <Values className=\"input\">\n            <Title>Edit {input.control.name}</Title>\n            <Scrolling>\n                <label>\n                    <span>Label:</span>\n                    <input\n                        className=\"value\"\n                        value={data.label || ''}\n                        onChange={({ target: { value } }) => dp({ label: value })}\n                    />\n                </label>\n                <label>\n                    <span>Name:</span>\n                    <input\n                        className=\"value\"\n                        value={data.name || ''}\n                        onChange={({ target: { value } }) => dp({ name: value })}\n                    />\n                </label>\n                <label>\n                    <span>Class:</span>\n\n                    <input\n                        className=\"value\"\n                        value={data.className || ''}\n                        onChange={({ target: { value } }) => dp({ className: value })}\n                    />\n                </label>\n\n                <Options input={input} label=\"Options\" nested=\"options\" />\n\n                <fieldset>\n                    <legend>Other Class Names:</legend>\n                    <label>\n                        <span>Wrapper:</span>\n                        <input\n                            className=\"value\"\n                            value={data.classNames.wrapper || ''}\n                            onChange={({ target: { value } }) => dp({ classNames: { wrapper: value } })\n                            }\n                        />\n                    </label>\n                    <label>\n                        <span>Label:</span>\n                        <input\n                            className=\"value\"\n                            value={data.classNames.label || ''}\n                            onChange={({ target: { value } }) => dp({ classNames: { label: value } })\n                            }\n                        />\n                    </label>\n                    <label>\n                        <span>Input:</span>\n                        <input\n                            className=\"value\"\n                            value={data.classNames.input || ''}\n                            onChange={({ target: { value } }) => dp({ classNames: { input: value } })\n                            }\n                        />\n                    </label>\n                </fieldset>\n\n\n                <Options input={input} label=\"Attributes\" nested=\"attributes\" />\n            </Scrolling>\n        </Values>\n    )\n}\n\nconst ContainerEdit: FC<{ container: Container }> = ({ container }) => {\n    const sc = useStoreContext()\n    const { data } = container\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: container, patch })\n\n    return (\n        <Values className=\"container\">\n            <Title>Edit {container.control.name} container</Title>\n            <label>\n                <span>Class:</span>\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n\n        </Values>\n    )\n}\n\nconst TextHeadingSize: FC<{\n    txt: TextElement\n    onChange: (value: string) => void\n}> = ({ txt, onChange }) => {\n    if (txt.control.id !== 'heading') {\n        return null\n    }\n    return (\n        <label>\n            <span>Size:</span>\n            <select value={txt.data.tag} onChange={ev => onChange(ev.target.value)}>\n                <option value=\"h1\">Heading 1</option>\n                <option value=\"h2\">Heading 2</option>\n                <option value=\"h3\">Heading 3</option>\n                <option value=\"h4\">Heading 4</option>\n                <option value=\"h5\">Heading 5</option>\n                <option value=\"h6\">Heading 6</option>\n            </select>\n        </label>\n    )\n}\n\nconst TextEdit: FC<{ control: TextElement }> = ({ control }) => {\n    const sc = useStoreContext()\n    const { data } = control\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: control, patch })\n\n    return (\n        <Values className=\"text\">\n            <Title>Edit text</Title>\n            <label>\n                <span>Text:</span>\n\n                <textarea\n                    id={control.id}\n                    value={data.text || ''}\n                    onChange={({ target: { value } }) => dp({ text: value })}\n                />\n            </label>\n            <TextHeadingSize\n                txt={control}\n                onChange={(tag:string) => dp({ tag })}\n\n            />\n            <label>\n                <span>Class:</span>\n\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n        </Values>\n    )\n}\n\n\nconst Edit: FC<{ target: Element }> = ({ target }) => {\n    if (isContainer(target)) {\n        return <ContainerEdit container={target} />\n    }\n    if (isInput(target)) {\n        return <InputEdit input={target} />\n    }\n    if (isText(target)) {\n        return <TextEdit control={target} />\n    }\n    return null\n}\n\n\nconst EditPanelEl = styled.div({\n    height: '100%',\n    background: 'white',\n    display: 'flex',\n    flexDirection: 'column',\n//    margin: '10px',\n    overflow: 'hidden',\n\n    '.edit-pane': {\n        flex: 1,\n        overflowY: 'auto',\n        padding: '10px',\n    },\n    '.footer': {\n        padding: '10px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        borderTop: '1px solid lightGrey',\n    },\n    legend: {\n        backgroundColor: '#000',\n        color: '#fff',\n        padding: '3px 6px',\n        fontSize: '16px',\n    },\n    'label, .heading': {\n        display: 'flex',\n        marginBottom: '5px',\n        '> *:first-child': {\n            width: '125px',\n        },\n    },\n    '.heading > *': {\n        fontWeight: 'bold',\n    },\n    '.value': {\n        minWidth: '150px',\n        flex: 1,\n    },\n    button: {\n        marginLeft: '1rem',\n        svg: {\n            height: '18px',\n        },\n    },\n    fieldset: {\n        marginTop: '1rem',\n        '.controls': {\n            display: 'flex',\n\n            justifyContent: 'flex-end',\n            '.add-attr': {\n                border: 0,\n                padding: '0 5px',\n            },\n        },\n    },\n    textarea: {\n        width: '100%',\n        minHeight: '50px',\n        padding: '4px',\n    },\n    '.widths': {\n        '.row': {\n            display: 'flex',\n            justifyContent: 'space-between',\n            span: {\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                marginRight: '10px',\n                width: 'inherit',\n            },\n        },\n    },\n})\n\nexport const EditPanel = () => {\n    const sc = useStoreContext()\n    const [canFocus, setCanFocus] = useState(false)\n    const panelRef = useRef<HTMLDivElement>(null)\n    const { editing } = sc.store\n    useOnClickOutside(panelRef, () => sc.dispatch({ type: 'HIDE_EDIT' }))\n    useEffect(() => {\n        if (!editing) {\n            setCanFocus(false)\n        }\n        if (editing) {\n            setTimeout(() => { // setTimeout to focus after animation completes\n                if (panelRef.current) {\n                    setCanFocus(true)\n                    const firstInput = panelRef.current.querySelector('input,textarea')\n                    if (firstInput) {\n                        (firstInput as HTMLInputElement).focus()\n                    }\n                }\n            }, 250)\n        }\n    }, [editing])\n\n    if (!editing) {\n        return null\n    }\n\n    return (\n        <CanFocusContext.Provider value={canFocus}>\n            <EditPanelEl ref={panelRef} className=\"edit-panel\">\n\n                {editing && <Edit target={editing} />}\n\n            </EditPanelEl>\n        </CanFocusContext.Provider>\n    )\n}\n","// import { RefObj } from 'react'\n\n// hook from https://usehooks.com/useOnClickOutside/\n//\n\n\nimport { useEffect } from 'react'\n\n// /type RefObj = ReturnType<createRef<HTMLElement>>\ntype handlerT = (event: MouseEvent) => void // / MouseEventHandler<HTMLElement>\ntype refT = { current?: HTMLElement | null }\n\nexport function useOnClickOutside(ref: refT, handler:handlerT) {\n    useEffect(\n        () => {\n            const listener = (event:MouseEvent) => {\n                // Do nothing if clicking ref's element or descendent elements\n                if (!ref.current || ref.current.contains(event.target as any)) {\n                    return\n                }\n\n                handler(event)\n            }\n\n            document.addEventListener('mousedown', listener)\n\n\n            return () => {\n                document.removeEventListener('mousedown', listener)\n            }\n        },\n        // Add ref and handler to effect dependencies\n        // It's worth noting that because passed in handler is a new ...\n        // ... function on every render that will cause this effect ...\n        // ... callback/cleanup to run every render. It's not a big deal ...\n        // ... but to optimize you can wrap handler in useCallback before ...\n        // ... passing it into this hook.\n        [ref, handler],\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nimport { Controls } from './controls'\nimport { EditPanel } from './edit-panel'\n\nconst SidebarEl = styled.div({\n//    paddingRight: '10px',\n    overflow: 'hidden',\n    display: 'flex',\n    '> *': {\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        flexGrow: 1,\n        minHeight: 0,         /* for Firefox */\n    },\n    ul: {\n        padding: 0,\n        margin: 0,\n    },\n})\nexport const Sidebar:React.FC = () => {\n    return (\n        <SidebarEl className=\"sidebar\">\n            <Controls />\n            <EditPanel />\n        </SidebarEl>\n    )\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport cn from 'classnames'\nimport { useKeyPress } from '../hooks/use-key-press'\n\ninterface EditableTextProps {\n    className?: string\n    children: React.ReactNode\n    textValue: string\n    onTextSaved(text: string): void\n}\n\ninterface EditingState {\n    position: number\n}\n\n// mostly take from joelmturner.com/blog/inline-text-edit-react-hooks\n// but sets cursor position to match click position\nexport const EditableText:React.FC<EditableTextProps> = (props) => {\n    const { onTextSaved, textValue, children } = props\n\n    const [isInputActive, setIsInputActive] = useState<boolean | EditingState>(\n        false,\n    )\n    const [inputValue, setInputValue] = useState(textValue)\n\n    const wrapperRef = useRef<HTMLSpanElement>(null)\n    const textRef = useRef(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onUpdated = ():void => {\n        if (inputRef.current && inputRef.current.value !== textValue) {\n            onTextSaved(inputRef.current.value)\n        }\n        setIsInputActive(false)\n    }\n    const onClear = ():void => {\n        setInputValue(textValue)\n        setIsInputActive(false)\n    }\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                onUpdated()\n                break\n            }\n            case 'Escape': {\n                onClear()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    useEffect(() => {\n        if (isInputActive !== false) {\n            const edit = isInputActive as EditingState\n            const input = inputRef.current!\n            input.focus()\n            input.setSelectionRange(edit.position, edit.position)\n        }\n    }, [isInputActive])\n\n    const onBlur = useCallback(() => {\n        onUpdated()\n    }, [])\n\n    const handleInputChange = useCallback(\n        event => setInputValue(event.target.value),\n        [setInputValue],\n    )\n\n    const handleSpanClick = useCallback(() => {\n        const s = window.getSelection()\n        if (!s) {\n            return\n        }\n        const range = s.getRangeAt(0)\n        setIsInputActive({\n            position: range.startOffset,\n        })\n    }, [setIsInputActive])\n    return (\n        <span className={cn('inline-text', props.className)} ref={wrapperRef}>\n            <span\n                ref={textRef}\n                onClick={handleSpanClick}\n                style={{ display: isInputActive ? 'none' : 'inline' }}\n                className='inline-text display'\n            >\n                {children}\n            </span>\n            <input\n                ref={inputRef}\n                style={{\n\n                    display: isInputActive ? 'inline' : 'none',\n                }}\n                size={Math.round(inputValue.length * 1.1)}\n                value={inputValue}\n                onChange={handleInputChange}\n                onBlur={onBlur}\n                className='inline-text editing'\n            />\n        </span>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { useDrop, useDrag, DragElementWrapper, DragSourceOptions } from 'react-dnd'\nimport { GripHorizontal } from '@styled-icons/fa-solid/GripHorizontal'\nimport { Edit } from '@styled-icons/fa-solid/Edit'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport { EditableText } from './editable-text'\nimport { Scrolling } from './components'\nimport {\n    useStore,\n    Element,\n    isContainer,\n    isText,\n    isInput,\n    InputElement,\n    TextElement,\n    useStoreContext,\n    Container,\n} from './store'\n\nconst revealColor = '#e8e8e8'\n\nconst DropEl = styled.div({\n    transition: 'all 0.3s ease-in-out',\n})\n\nconst HorizontalDropEl = styled(DropEl)({\n    height: '15px',\n    '&.isHovered': {\n        height: '100px',\n        background: revealColor,\n    },\n    '&:last-child': {\n        flex: 1,\n    },\n})\n\ninterface DropProps {\n    index: number\n    container: Container\n}\n\ninterface DropItem {\n    id: string\n    fromIndex?: number\n    fromContainer?: Container\n}\n\nconst useFormDrop = ({ index, container }: DropProps) => {\n    const sc = useStoreContext()\n    const [{ isHovered }, dropRef] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        drop: (item) => {\n            const { id, fromIndex, fromContainer } = (item as any as DropItem)\n            sc.dispatch({\n                type: 'ADD_ELEMENT',\n                id,\n                destIndex: index,\n                container,\n                fromIndex,\n                fromContainer,\n            })\n        },\n    })\n    return { isHovered, dropRef }\n}\n\nexport const HorizonontalDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n    return <HorizontalDropEl ref={dropRef} className={cn('drop', { isHovered })} />\n}\n\nconst VerticalDropEl = styled(DropEl)({\n    minWidth: '20px',\n    '&.isHovered': {\n        flex: 1,\n        // width: '100px',\n        background: revealColor,\n    },\n})\n\nconst VerticalDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n\n    return (\n        <VerticalDropEl\n            ref={dropRef}\n            className={cn('drop', 'container-drop', { isHovered })}\n        />\n    )\n}\n\nconst ElementPreviewEl = styled.div<{ editing?: boolean }>(({ editing }) => ({\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n    padding: '10px',\n    color: '#0c0c0c',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    minHeight: 'fit-content',\n    boxShadow: editing ? '0 3px 5px 3px rgba(0,0,0,0.35)' : 'none',\n    cursor: 'pointer',\n\n    'input, textarea, select': {\n        cursor: 'pointer',\n        '&:focus': {\n            outline: 'none',\n            borderColor: 'inherit',\n            boxShadow: 'none',\n        },\n    },\n\n    '&.input .label, &.textarea .label': {\n        marginBottom: '-20px',\n        zIndex: 1,\n        fontSize: '80%',\n        marginLeft: '10px',\n    },\n    '.control-type': {\n        fontSize: '0.8rem',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        border: '1px solid',\n        padding: '2px',\n        borderRadius: '8px',\n    },\n\n    '&:hover': {\n        backgroundColor: 'white',\n        '> .controls': {\n            opacity: 1,\n        },\n    },\n\n    '.controls': {\n        opacity: 0,\n        position: 'absolute',\n        transition: 'opacity 0.3s ease-in-out',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'flex-start',\n        '.move svg': {\n            cursor: 'move',\n        },\n        button: {\n            border: 0,\n            padding: 0,\n            cursor: 'pointer',\n            backgroundColor: 'transparent',\n            '&:hover': {\n                svg: { color: '#212121' },\n            },\n        },\n        svg: {\n            height: '20px',\n            color: 'gray',\n            transition: 'opacity 0.3s ease-in-out',\n        },\n    },\n\n    '>.controls': {\n        background: 'white',\n        right: 0,\n        top: 0,\n        padding: '5px',\n        borderBottomLeftRadius: '5px',\n        position: 'absolute',\n        width: 'fit-content',\n        '> *': {\n            margin: '0 5px',\n        },\n    },\n\n    '.inline-text': {\n        padding: 0,\n        border: 0,\n        fontSize: 'inherit',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n\n    '.label': {\n        fontSize: '20px',\n        marginBottom: '5px',\n    },\n\n    '.control-preview': {\n        flex: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        '&.row': {\n            flexDirection: 'column',\n        },\n    },\n    'input + span': {\n        marginLeft: '10px',\n    },\n}))\n\nconst Controls:React.FC<{\n    target: Element | Container\n    container: Container,\n    drag?: DragElementWrapper<DragSourceOptions>,\n}> = ({\n    target, container, drag,\n}) => {\n    const sc = useStoreContext()\n\n    return (\n        <div className={cn('controls', { container: isContainer(target) })}>\n            <span>{target.control.name}</span>\n            <button className='trash' onClick={() => sc.dispatch({\n                type: 'DELETE', target, container,\n            })}>\n                <TrashAlt />\n            </button>\n            <button onClick={() => sc.dispatch({ type: 'EDIT', target })}>\n                <Edit />\n            </button>\n            {drag && (\n                <button className='move' ref={drag}>\n                    <GripHorizontal />\n                </button>)}\n        </div>\n    )\n}\n\nconst ControlPreview = styled.div.attrs({\n    className: 'control-preview',\n\n})({\n   // boxShadow: '0 10px 9px rgba(0,0,0,0.35)',\n    padding: '10px',\n})\n\nconst InputPreview: React.FC<{\n    index: number\n    input: InputElement\n    container: Container\n}> = ({\n    index, input, container,\n}) => {\n    const [{ opacity }, drag] = useDrag({\n        item: { id: input.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n    const sc = useStoreContext()\n\n    return (\n        <ElementPreviewEl\n            ref={drag}\n            style={{ opacity }}\n            editing={sc.store.editing === input}\n            className={cn('element-preview', input.control.id)}\n        >\n            <Controls target={input} container={container} />\n            <ControlPreview\n                onClick={() => {\n                    console.log(\"CLICK\")\n                    sc.dispatch({ type: 'EDIT', target: input })\n                }}\n            >\n                <span className=\"label\">{input.data.label}</span>\n                {input.placeholder}\n            </ControlPreview>\n        </ElementPreviewEl>\n    )\n}\n\nconst TextPreview: React.FC<{\n    index: number\n    control: TextElement\n    container: Container\n}> = ({\n    index, control, container,\n}) => {\n    const sc = useStoreContext()\n    const [{ opacity }, drag] = useDrag({\n        item: { id: control.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n    const text = React.createElement(control.data.tag, {}, control.data.text)\n\n    return (\n        <ElementPreviewEl\n            editing={sc.store.editing === control}\n            style={{ opacity }}\n            ref={drag}\n            className={cn('element-preview', control.control.id)}\n        >\n            <Controls target={control} container={container} />\n            <div className='control-preview'>\n                <EditableText\n                    onTextSaved={(updated) => {\n                        sc.dispatch({ type: 'UPDATE', target: control, patch: { text: updated } })\n                    }}\n                    textValue={control.data.text}\n                >{text}</EditableText>\n            </div>\n        </ElementPreviewEl>\n    )\n}\n\n\nconst ContainerPreviewEl = styled(ElementPreviewEl)({\n    border: '1px dashed gray',\n    alignItems: 'stretch',\n    padding: '5px',\n\n    '> .container.controls': {\n        background: 'white',\n        border: '1px dashed gray',\n\n        width: 'fit-content',\n        '> *': {\n            margin: '0 5px',\n        },\n    },\n    '&.container-row': {\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        minHeight: '80px',\n        '> .container-drop': {\n            width: '100%',\n        },\n        '> .container-column': {\n            margin: '-1px',\n            flex: 1,\n        },\n        '> .container.controls': {\n            top: '-27px',\n            left: 0,\n            padding: '2px 5px',\n            borderTopRightRadius: '5px',\n            borderTopLeftRadius: '5px',\n            borderBottomWidth: 0,\n        },\n    },\n    '> .container-preview': {\n        flex: 1,\n    },\n\n    '&.empty': {\n        alignItems: 'stretch',\n    },\n    '&.container-column': {\n\n        '> .container.controls': {\n            top: 'calc(50% - 40px)',\n            left: '-25px',\n            right: 'auto',\n            display: 'flex',\n            width: '30px',\n            flexDirection: 'row-reverse',\n            borderRadius: '5px',\n            alignItems: 'center',\n            writingMode: 'vertical-rl',\n            textOrientation: 'upright',\n            fontSize: '80%',\n            '> *': {\n                margin: '5px 0',\n            },\n        },\n        '> .element-preview': {\n            flex: 1,\n        },\n    },\n})\n\n\nconst ContainerPreview:React.FC<{\n    container: Container\n    parent: Container\n    index: number\n}> = ({ parent, container, index }) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: container.id, fromIndex: index, fromContainer: parent, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    const Drop = container.isRow ? HorizonontalDrop : VerticalDrop\n\n    return (\n        <ContainerPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('container-preview', `container-${container.direction}`, {\n                empty: container.children.length === 0,\n            })}\n        >\n            <Drop container={container} index={0} />\n            <Controls target={container} container={parent} drag={drag} />\n            {container.children.map((el, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={el} />\n                    <Drop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n        </ContainerPreviewEl>\n    )\n}\n\n\nconst ElementPreview:React.FC<{\n    el: Element|Container,\n    index: number,\n    container: Container,\n}> = ({ el, index, container }) => {\n    if (isContainer(el)) {\n        return <ContainerPreview parent={container} container={el} index={index} />\n    }\n    if (isText(el)) {\n        return <TextPreview control={el} container={container} index={index} />\n    }\n    if (isInput(el)) {\n        return <InputPreview input={el} container={container} index={index} />\n    }\n    return null\n}\n\n\nconst FormElementsEl = styled(Scrolling)({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyItems: 'flex-start',\n    background: '#fafafa',\n    padding: '20px',\n    boxSizing: 'border-box',\n    boxShadow: '0 0 2px 1px rgba(0, 0, 0, 0.1)',\n    //opacity: editing ? '0.3' : '1',\n    transition: 'all 0.3s ease-in-out',\n    width: 'fit-content',\n    minWidth: '100%',\n    '> .container-preview': {\n        margin: '0 2px',\n    },\n    'p, h1, h2, h3, h4, h5, h6': {\n        padding: 0,\n        margin: 0,\n    },\n})\nexport const FormElements = () => {\n    const { form } = useStore()\n    const [{ isHovered }, drop] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        canDrop: () => false,\n    })\n\n    return (\n        <FormElementsEl\n            ref={drop}\n            className={cn('form-elements', { isHovered })}\n        >\n\n            <HorizonontalDrop container={form} index={0} />\n            {form.children.map((e, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={form} el={e} />\n                    <HorizonontalDrop container={form} index={i + 1} />\n                </React.Fragment>\n            ))}\n\n        </FormElementsEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\nimport { Sidebar } from './editor/sidebar'\nimport { useProvidedStoreContext, StoreContext, Form } from './editor/store'\nimport { FormElements } from './editor/form'\nimport { SerializedForm } from './data'\n\nconst FormPanelEl = styled.div({\n    display: 'flex',\n    width: '100%',\n    overflow: 'hidden',\n})\nconst FormPanel = () => {\n    return (\n        <FormPanelEl>\n            <FormElements />\n        </FormPanelEl>\n    )\n}\n\nconst EditorEl = styled.div({\n    display: 'grid',\n    gridTemplateColumns: '1fr 300px',\n    gridTemplateRows: '1fr',\n    height: '100%',\n    gap: '10px',\n    position: 'relative',\n\n    // '> *': {\n    //     display: 'flex',\n    //     flexDirection: 'column',\n    // },\n})\n\nexport interface EditorProps {\n    className?: string\n    onChange?(form: Form): void\n    defaultValue?: SerializedForm\n    value?: SerializedForm\n}\n\nexport const Editor:React.FC<EditorProps> = ({\n    className, onChange, value, defaultValue,\n}) => {\n    const ctx = useProvidedStoreContext(defaultValue)\n    React.useEffect(() => {\n        ctx.dispatch({ type: 'REPLACE', form: value })\n    }, [value])\n    React.useEffect(() => {\n        if (onChange) { onChange(ctx.store.form) }\n    }, [onChange, ctx.store])\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <StoreContext.Provider value={ctx}>\n                <EditorEl className={cn('formial-editor', className)}>\n                    <FormPanel />\n                    <Sidebar />\n                </EditorEl>\n            </StoreContext.Provider>\n        </DndProvider>\n    )\n}\n","import cx from 'classnames'\nimport {\n    SerializedForm,\n    isSerializedText,\n    isSerializedForm,\n    isSerializedInput,\n    SerializedElement,\n    SerializedContainer,\n    isSerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement,\n} from './data'\n\n\ninterface UnserializeOptions {\n    parent?: Container\n}\n\nclass Element {\n\n    data: SerializedElement\n    options: UnserializeOptions\n\n    constructor(data: SerializedElement, options: UnserializeOptions) {\n        this.data = data\n        this.options = options\n    }\n\n    el?:HTMLElement\n\n    createElement():HTMLElement {\n        return document.createElement('div')\n    }\n\n    get columnSmWidth():number {\n        if (this.options.parent instanceof Container && this.options.parent.isBSRow) {\n            return Math.round(12 / this.options.parent.children.length)\n        }\n        return 0\n    }\n\n    render(root:HTMLElement, skipAttributes = false) {\n        if (!this.el) {\n            this.el = this.createElement()\n        }\n        this.setAttributes({\n            'data-control': this.data.type,\n            'data-id': this.data.id,\n            class: cx(this.data.className, {\n                [`col-sm-${this.columnSmWidth}`]: this.columnSmWidth !== 0,\n            }),\n        })\n\n        if (!skipAttributes) {\n            this.setAttributes()\n        }\n\n        if (this.el.parentElement !== root) {\n            root.appendChild(this.el)\n        }\n        return this\n    }\n\n    setAttributes(\n        attrs = this.data.attributes,\n        el:HTMLElement|undefined = this.el,\n    ) {\n        if (!el || !attrs) {\n            return\n        }\n        Object.keys(attrs).forEach((k) => {\n            if (k) {\n                el.setAttribute(k, String(attrs[k]))\n            }\n        })\n    }\n\n}\n\nclass TextElement extends Element {\n\n    data: SerializedTextElement\n\n    constructor(data: SerializedTextElement, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n    }\n\n    createElement():HTMLElement {\n        return document.createElement(this.data.tag)\n    }\n\n    render(root:HTMLElement) {\n        super.render(root)\n        this.el!.innerText = this.data.text\n        return this\n    }\n\n}\n\nclass InputElement extends Element {\n\n    data: SerializedInputElement\n    label?: HTMLLabelElement\n    input?: HTMLElement\n\n    constructor(data: SerializedInputElement, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n    }\n\n\n    render(root:HTMLElement) {\n        super.render(root, true)\n\n        this.setAttributes({\n            'data-type': this.data.control,\n            class: cx(this.data.className, {\n                [`col-sm-${this.columnSmWidth}`]: this.columnSmWidth !== 0,\n            }),\n        })\n\n        if (!this.input) {\n            const renderer = this[`_${this.data.control}`]\n            if (renderer) {\n                const input =  renderer.apply(this)\n                this.input = input as HTMLElement\n                // this.input.className = this.data.classNames.input\n                // this.input.id = this.data.id\n                this.el!.appendChild(this.input)\n            }\n        }\n        return this\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    createInput(tag: string) {\n        const float = document.createElement('div')\n        float.className = this.data.classNames.wrapper\n\n        const input = document.createElement(tag)\n\n        this.setAttributes({\n            name: this.data.name,\n            id: this.data.id,\n            class: 'form-control',\n            placeholder: this.data.label,\n            ...this.data.attributes,\n        }, input)\n\n        float.appendChild(input)\n\n        const label = document.createElement('label')\n        label.innerText = this.data.label\n        this.setAttributes({\n            for: this.data.id,\n\n        }, label)\n        float.appendChild(label)\n\n        return float\n    }\n\n    _textarea() {\n        return this.createInput('textarea')\n    }\n\n    _input() {\n        return this.createInput('input')\n    }\n\n    renderOptions(cb: (a:string, b:string) => { [k:string]: string }) {\n        const wrapper = document.createElement('div')\n        this.setAttributes(this.data.attributes, wrapper)\n        wrapper.className = this.data.classNames.wrapper\n\n        const labelTitle = document.createElement('label')\n        labelTitle.innerText = this.data.label\n        wrapper.appendChild(labelTitle)\n\n        this.optionPairs.forEach(([optId, optValue]) => {\n            const { id, inputType, name, value, label } = cb(optId, optValue)\n            const inputId = `${id}-${this.data.id}`\n\n            const option = document.createElement('label')\n            this.setAttributes({ class: 'form-check' }, option)\n\n            const input = document.createElement('input')\n            this.setAttributes({\n                class: 'form-check-input',\n                'data-id': id,\n                type: inputType,\n                name,\n                value,\n                id: inputId,\n            }, input)\n            option.appendChild(input)\n\n            const labelEl = document.createElement('span')\n            this.setAttributes({\n                className: 'form-check-label',\n            }, labelEl)\n            labelEl.innerText = label\n            option.appendChild(labelEl)\n\n            wrapper.appendChild(option)\n        })\n        return wrapper\n    }\n\n    _radio() {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'radio',\n            name: this.data.name,\n            id,\n            value,\n            label: value,\n        }))\n    }\n\n    _checkbox(): HTMLDivElement {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'checkbox',\n            name: id,\n            value,\n            id,\n            label: value,\n        }))\n    }\n\n    _select(): HTMLDivElement {\n        const wrapper = document.createElement('div')\n        wrapper.className = 'form-floating'\n\n        const select = document.createElement('select')\n        this.setAttributes({\n            name: this.data.name,\n            class: 'form-select',\n            id: this.data.id,\n        }, select)\n\n        this.optionPairs.forEach(([value, label]) => {\n            const option = document.createElement('option')\n            this.setAttributes({ value }, option)\n            option.innerText = label\n            select.appendChild(option)\n        })\n\n        wrapper.appendChild(select)\n\n        const label = document.createElement('label')\n        this.setAttributes({\n            for: this.data.id,\n        }, label)\n        label.innerText = this.data.label\n\n        wrapper.appendChild(label)\n\n        return wrapper\n    }\n\n}\n\n\nclass Container extends Element {\n\n    children: Array<Element>\n\n    data: SerializedContainer\n    constructor(data: SerializedContainer, options: UnserializeOptions) {\n        super(data, options)\n        this.data = data\n        this.children = data.children\n            .map(c => unserialize(c, { parent: this }))\n            .filter(Boolean) as Array<Element>\n    }\n\n    get isBSRow() {\n        // counter intuitively, a bootstrap row is laid out in columns\n        return this.data.direction === 'column'\n    }\n\n    render(root:HTMLElement) {\n        super.render(root)\n\n        this.el!.className = cx(this.el?.className, {\n            row: this.isBSRow, // a bootstrap row lays out in columns\n            'd-flex flex-column': !this.isBSRow,\n            'formial-form': this.data.type == 'FORM'\n        })\n        this.children.forEach(c => c.render(this.el!))\n        return this\n    }\n\n}\n\nconst unserialize = (data: SerializedElement, options: UnserializeOptions = {}):Element => {\n    if (isSerializedText(data)) {\n        return new TextElement(data, options)\n    }\n\n    if (isSerializedContainer(data) || isSerializedForm(data)) {\n        return new Container(data, options)\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(data, options)\n    }\n\n    return new Element(data, options)\n}\n\nexport const findField = (el: any, id: string): SerializedElement | null => {\n    if (el.id === id) {\n        return el\n    }\n    if (Array.isArray(el.children)) {\n        for (const child of el.children) {\n            const match = findField(child, id)\n            if (match) {\n                return match\n            }\n        }\n    }\n    return null\n}\n\nexport const render = (root: HTMLElement, form: SerializedForm) => {\n    root.innerHTML = ''\n    const tree = unserialize(form)\n    if (tree) {\n        tree.render(root)\n    }\n}\n","import React from 'react'\nimport { Editor, Container, render } from 'formial'\n\nconst DEFAULT = {\"id\":\"4f78521b-59a8-4069-8ae8-8b0c793d9f5e\",\"type\":\"FORM\",\"control\":\"col\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"5421839e-6592-4c7b-aea6-72dd889f2354\",\"type\":\"TEXT\",\"control\":\"heading\",\"tag\":\"h3\",\"text\":\"Hello!\",\"className\":\"\"},{\"id\":\"31650e8e-a0ee-4c2b-a35d-5d5c344fabd0\",\"type\":\"TEXT\",\"control\":\"para\",\"tag\":\"p\",\"text\":\"Tell us something about yourself\",\"className\":\"\"},{\"id\":\"e22f3d00-6d2a-4f26-a813-e5581636ae77\",\"type\":\"CONTAINER\",\"control\":\"col\",\"className\":\"\",\"direction\":\"column\",\"children\":[{\"id\":\"2f6ada7b-28bb-4a8a-a318-553fd357717b\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"fe50d0bb-ed56-4870-a79c-2a9cf03eacd8\",\"type\":\"INPUT\",\"control\":\"input\",\"label\":\"What's your name?\",\"className\":\"mb-2\",\"name\":\"input-5597\",\"classNames\":{\"wrapper\":\"form-floating\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{}},{\"id\":\"70353b38-ff98-46f6-91af-846aeb1881d0\",\"type\":\"INPUT\",\"control\":\"textarea\",\"label\":\"What do you like?\",\"className\":\"flex-fill\",\"name\":\"textarea-2452\",\"classNames\":{\"wrapper\":\"form-floating mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{}}]},{\"id\":\"2b9bed3e-647e-4559-b60e-6e8b6a2427f7\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"direction\":\"row\",\"children\":[{\"id\":\"80a4df1f-d041-4f9b-b1fc-cd68964a6e7d\",\"type\":\"INPUT\",\"control\":\"checkbox\",\"label\":\"Fruits you like\",\"className\":\"\",\"name\":\"checkbox-10613\",\"classNames\":{\"wrapper\":\"form-control mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"Bannana\",\"2\":\"Orange\",\"3\":\"Mango\"}},{\"id\":\"233acef5-b749-4478-8179-142c5635d181\",\"type\":\"INPUT\",\"control\":\"radio\",\"label\":\"How Many Cats?\",\"className\":\"\",\"name\":\"radio-7972\",\"classNames\":{\"wrapper\":\"form-control mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"one\",\"2\":\"two\",\"3\":\"three\"}},{\"id\":\"7e7af9f4-1e35-4c4b-af81-e52b9ff7b245\",\"type\":\"INPUT\",\"control\":\"select\",\"label\":\"Pick a number\",\"className\":\"\",\"name\":\"select-2778\",\"classNames\":{\"wrapper\":\"form-floating mb-2\",\"label\":\"\",\"input\":\"form-control\"},\"attributes\":{},\"options\":{\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"4\":\"four\",\"5\":\"five\"}}]}]}]\n}\n\n\nconst App = () => {\n    const [value, setValue] = React.useState<Container>()\n    const htmlRef = React.useRef(null)\n\n    const onChange = (container: Container) => setValue(container)\n\n    const renderHTML = () => {\n        // json would normally be saved.\n        // It's intended to be loading back into the editor or rendered to a form\n        const json = value!.serialize()\n        console.log(JSON.stringify(json))\n        render(htmlRef.current!, json)\n    }\n\n    return (\n        <div id=\"example-builder\">\n            <h3>Formial Demo</h3>\n            <p>\n                This is an example of Formial editing and rendering forms.  The source\n                code for this demo can be viewed in <a href=\"https://github.com/nathanstitt/formial/blob/main/example/src/App.tsx\">example/src/App.tsx</a>.\n            </p>\n                <Editor onChange={onChange} defaultValue={DEFAULT}  />\n                <hr />\n                <div><button onClick={renderHTML}>Render</button></div>\n                <hr />\n                <div className=\"mb-4\" ref={htmlRef}></div>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}