{"version":3,"sources":["../../src/lib.ts","../../src/data.ts","../../src/builder/store.ts","../../src/builder/default-controls.tsx","../../src/builder/controls.tsx","../../src/hooks/use-key-press.ts","../../src/builder/editable-text.tsx","../../src/builder/form.tsx","../../src/builder/edit-panel.tsx","../../src/builder.tsx","../../src/render.ts","App.tsx","index.tsx"],"names":["uuidv4","replace","r","Math","c","v","isSerializedInput","toBeDetermined","isSerializedContainer","isSerializedText","unserialize","mp","control","data","children","Element","constructor","this","deepmerge","className","sizes","mobile","tablet","desktop","id","type","Container","options","map","direction","TextElement","tag","text","InputElement","label","name","classNames","wrapper","input","attributes","placeholder","Object","key","Control","definition","isContainer","isInput","isText","RowControl","TextControl","ColumnControl","defaultControls","registered","register","controls","sc","React","useStoreContext","useStore","storeReducer","st","action","store","fromContainer","fromIndex","element","destIndex","cntrl","console","container","addElement","e","editing","target","undefined","initStore","defaultValue","Map","useProvidedStoreContext","useStoreReducer","dispatch","renderOptions","el","rend","icon","h","para","readOnly","hasOptions","n","value","ControlLabelEl","cursor","backgroundColor","listStyle","margin","padding","userSelect","border","svg","height","marginRight","ControlLabel","useDrag","item","ref","drag","ControlsListingEl","overflow","paddingRight","ul","ControlsListing","defaultOptions","useKeyPress","keys","callback","opts","keyList","useMemo","Array","callbackRef","useRef","useEffect","handle","useCallback","identifier","window","targetNode","EditableText","props","useState","wrapperRef","textRef","inputRef","onUpdated","onTextSaved","setIsInputActive","ev","setInputValue","isInputActive","edit","onBlur","handleInputChange","event","handleSpanClick","s","range","position","startOffset","cn","onClick","style","display","inputValue","onChange","FormDropEl","minHeight","flex","useFormDrop","useDrop","accept","collect","isHovered","drop","dropRef","FormDrop","ElementPreviewEl","flexDirection","color","justifyContent","alignItems","top","left","right","marginLeft","width","fontSize","borderRadius","opacity","transition","button","outline","marginBottom","flexWrap","Controls","InputPreview","monitor","preview","TextPreview","updated","patch","textValue","ContainerPreviewEl","background","borderTopRightRadius","borderTopLeftRadius","borderBottomWidth","ContainerDropEl","minWidth","ContainerDrop","ContainerPreview","index","empty","i","parent","ElementPreview","FormElementsEl","justifyItems","boxSizing","boxShadow","borderColor","FormElements","canDrop","Width","size","min","max","Number","Sizes","NewAttribute","nested","saveValue","deleteAttr","EditAttribute","attributeName","attrs","Attribute","Options","optionNames","attrName","InputEdit","dp","ContainerEdit","TextHeadingSize","txt","TextEdit","Edit","EditPanelEl","borderBottom","paddingBottom","overflowY","borderTop","legend","fontWeight","fieldset","marginTop","textarea","span","EditPanel","panelRef","firstInput","setTimeout","FormPanelEl","FormPanel","BuilderEl","gridTemplateColumns","gridTemplateRows","gap","Builder","ctx","backend","HTML5Backend","StoreContext","document","skipAttributes","cx","parentElement","root","k","String","sz","class","renderer","createInput","cb","optId","option","labelEl","inputType","DEFAULT","App","setValue","htmlRef","log","serialized","current","form","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e84c54da.chunk.js","sourcesContent":["// uses Math.random which may only be pseudo random\nexport function uuidv4():string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","export interface SerializedSize {\n    mobile: number\n    tablet: number\n    desktop: number\n}\n\nexport interface SerializedElement {\n    type: string\n    id: string\n    control: string\n    className: string\n    sizes: SerializedSize\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedInputElement extends SerializedElement {\n    type: string\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport interface SerializedTextElement extends SerializedElement {\n    tag: string\n    text: string\n}\n//  id: string; type: string; control: string;   tag: string; text: string;\n\nexport interface SerializedContainer extends SerializedElement {\n    direction: string // 'row' | 'column'\n    children: Array<SerializedElement|SerializedContainer|SerializedInputElement|SerializedTextElement>\n}\n\nexport function isSerializedInput(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedInputElement { return (toBeDetermined.type === 'INPUT') }\n\nexport function isSerializedContainer(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedContainer { return (toBeDetermined.type === 'CONTAINER') }\n\n\nexport function isSerializedText(\n    toBeDetermined: SerializedElement\n): toBeDetermined is SerializedTextElement { return (toBeDetermined.type === 'TEXT') }\n","import * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport { uuidv4 } from '../lib'\nimport {\n    SerializedSize,\n    SerializedElement,\n    SerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement,\n    isSerializedText,\n    isSerializedContainer,\n    isSerializedInput,\n} from '../data'\n\nexport interface ControlDefinition {\n    id: string\n    icon: React.ReactNode\n    name: string\n    placeholder?(element: Element): React.ReactNode\n    hasOptions?: boolean\n}\n\nexport interface SizeData extends SerializedSize {\n\n}\n\ntype ControlsMap = Map<string, Control>\n\nexport interface Store {\n    controls: ControlsMap,\n    container: Container\n    editing?: Element\n}\n\nexport interface ElementData {\n    className: string\n    sizes: SizeData\n    attributes?: {\n        [value: string]: string\n    }\n}\n\nconst defaultSizes = ():SizeData => ({\n    mobile: 12,\n    tablet: 12,\n    desktop: 12,\n})\n\ntype ElementSerialization =\n    | SerializedElement\n    | SerializedContainer\n    | SerializedTextElement\n    | SerializedInputElement\n\n\nexport const unserialize = (mp: ControlsMap, data: ElementSerialization):Element|null => {\n    const control = mp.get(data.control)\n    if (!control) { return null }\n\n    if (isSerializedText(data)) {\n        return new TextElement(control, data)\n    }\n\n    if (isSerializedContainer(data)) {\n        return new Container(control, {\n            ...data,\n            children: data.children.map(c => unserialize(mp, c)).filter(Boolean) as Array<ContainerChild>\n        })\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(control, data)\n    }\n\n    return new Element(control, data)\n}\n\n\nexport class Element {\n    id: string\n    control: Control\n    data: ElementData\n    constructor(control: Control, data:any = {}) {\n        this.control = control\n        this.id = data.id || uuidv4()\n        this.data = deepmerge({\n            className: '',\n            sizes: defaultSizes(),\n        }, data)\n    }\n\n    public get serialized(): SerializedElement {\n        return {\n            id: this.id,\n            type: 'element',\n            control: this.control.id,\n            ...this.data,\n        }\n    }\n}\n\ninterface ContainerData extends ElementData {\n\n    children: Array<Element>\n}\n\n\nexport interface ContainerOptions {\n    id?: string\n    direction: string // 'row' | 'column'\n    data?: ContainerData\n    children?: Array<Element>\n}\n\ntype ContainerChild = Element|TextElement|Container|InputElement\n\nexport class Container extends Element {\n    direction: string // 'row' | 'column'\n    children: Array<ContainerChild>\n    constructor(control:Control, options: ContainerOptions) {\n        super(control, options)\n        this.direction = options.direction || 'row'\n        this.children = options.children || []\n    }\n\n    public get serialized(): SerializedContainer {\n        return {\n            ...super.serialized,\n            ...this.data,\n            children: this.children.map(c => c.serialized),\n            direction: this.direction,\n            type: 'CONTAINER',\n        }\n    }\n}\n\ninterface TextData extends ElementData {\n    tag: string\n    text: string\n}\n\nexport class TextElement extends Element {\n    data: TextData\n\n    constructor(control:Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge.all([{\n            tag: control.id == 'para' ? 'p' : 'h3',\n            text: 'Some text…',\n            className: '',\n            sizes: defaultSizes(),\n        }, data]) as TextData\n    }\n    get serialized(): SerializedTextElement {\n        return {\n            ...super.serialized,\n            ...this.data,\n            type: 'TEXT',\n        }\n    }\n}\n\nexport interface InputData extends ElementData {\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport class InputElement extends Element {\n    data: InputData\n\n    constructor(control: Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge({\n            label: `${this.control.name} label`,\n            className: '',\n            sizes: defaultSizes(),\n            name: `${this.control.id}-${Math.round(Math.random() * 9999) + 1000}`,\n            classNames: {\n                wrapper: 'form-group',\n                label: 'col-sm-2',\n                input: 'form-control col-sm-10',\n            },\n            attributes: {},\n        }, data)\n        if (control.hasOptions && !this.data.options) {\n            this.data.options = {}\n        }\n    }\n\n    get placeholder(): React.ReactNode {\n        return (this.control.placeholder && this.control.placeholder(this)) || null\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    get serialized(): SerializedInputElement {\n        return {\n            ...super.serialized,\n            ...this.data,\n            type: 'INPUT',\n        }\n    }\n}\n\n\nexport class Control implements ControlDefinition {\n\n    id: string\n    name: string\n    icon: React.ReactNode\n\n    hasOptions?: boolean\n    placeholder?: (element: Element) => React.ReactNode\n\n    constructor(definition: ControlDefinition) {\n        this.name = definition.name\n        this.id = definition.id\n        this.icon = definition.icon\n        this.placeholder = definition.placeholder\n        this.hasOptions = definition.hasOptions\n    }\n\n    createElement(): Element {\n        return new InputElement(this)\n    }\n\n}\n\nexport function isContainer(\n    toBeDetermined: Element,\n): toBeDetermined is Container {\n    if (toBeDetermined instanceof Container) {\n        return true\n    }\n    return false\n}\n\nexport function isInput(\n    toBeDetermined: Element,\n): toBeDetermined is InputElement {\n    if (toBeDetermined instanceof InputElement) {\n        return true\n    }\n    return false\n}\n\nexport function isText(\n    toBeDetermined: Element,\n): toBeDetermined is TextElement {\n    if (toBeDetermined instanceof TextElement) {\n        return true\n    }\n    return false\n}\n\nexport class RowControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { direction: 'row' })\n    }\n\n}\n\nexport class TextControl extends Control {\n    createElement(): Element {\n        return new TextElement(this)\n    }\n}\n\nexport class ColumnControl extends Control {\n    createElement(): Element {\n        return new Container(this, { direction: 'column' })\n    }\n}\n\n\nexport const defaultControls = {\n    registered: new Map<string, Control>(),\n\n    register(controls: Array<Control>) {\n        controls.forEach(c => this.registered.set(c.id, c))\n    },\n}\n\ninterface InsertElementOptions {\n    id: string,\n    container: Container, destIndex: number,\n    fromIndex?: number, fromContainer?: Container\n}\nexport function addElement(\n    store: Store,\n    {\n        id, container, destIndex, fromIndex, fromContainer,\n    }: InsertElementOptions,\n): Store {\n    let cntrl: Control | undefined\n    let element: Element | undefined\n\n    if (fromIndex != null && fromContainer) {\n        element = fromContainer.children[fromIndex]\n        fromContainer.children.splice(fromIndex, 1)\n        if (fromContainer === container && fromIndex < destIndex) {\n            destIndex -= 1 // eslint-disable-line no-param-reassign\n        }\n    } else {\n        cntrl = store.controls.get(id)\n        if (!cntrl) {\n            // eslint-disable-next-line no-console\n            console.warn(`attempted to drop id ${id} but no control exists`)\n            return store\n        }\n    }\n    if (!element && cntrl) {\n        element = cntrl.createElement()\n    }\n    if (element) {\n        container.children.splice(destIndex, 0, element)\n    }\n    return { ...store }\n}\n\ninterface StoreContext {\n    store: Store\n    dispatch: React.Dispatch<Action> //  (patch:any): void\n}\n\nconst sc = React.createContext(null as any as StoreContext)\n\nexport const useStoreContext = ():StoreContext => React.useContext(sc)\n\nexport const useStore = ():Store => useStoreContext().store\n\n\ntype Action =\n    | { type: 'REPLACE', container?: SerializedContainer }\n    | { type: 'ADD_ELEMENT', id: string,\n        container: Container, destIndex: number,\n        fromIndex?: number, fromContainer?: Container }\n    | { type: 'DELETE', target: Element, container: Container }\n    | { type: 'UPDATE', target: Element, patch: any }\n    | { type: 'EDIT', target: Element }\n    | { type: 'HIDE_EDIT' }\n    | { type: 'ADD_ATTRIBUTE', input: InputElement, nested: string }\n    | { type: 'DELETE_ATTRIBUTE', input: InputElement, nested: string, name: string }\n    | { type: 'REPLACE_NEW_ATTRIBUTE', input: InputElement, nested: string, name: string, }\n\n\nconst storeReducer = (st:Store, action: Action): Store => {\n    switch (action.type) {\n        case 'ADD_ELEMENT': {\n            return addElement(st, action)\n        }\n        case 'REPLACE': {\n            if (action.container) {\n                const container = unserialize(st.controls, action.container)\n                if (container && isContainer(container)) {\n                    return { ...st, container }\n                }\n            }\n            return st\n        }\n        case 'DELETE': {\n            action.container.children = [\n                ...action.container.children.filter(e => e.id !== action.target.id),\n            ]\n            return { ...st }\n        }\n        case 'UPDATE': {\n            action.target.data = deepmerge(action.target.data as any, action.patch)\n            return { ...st }\n        }\n        case 'EDIT': {\n            return { ...st, editing: action.target }\n        }\n        case 'HIDE_EDIT': {\n            return { ...st, editing: undefined }\n        }\n        case 'ADD_ATTRIBUTE': {\n            action.input.data[action.nested][''] = ''\n            return { ...st }\n        }\n        case 'REPLACE_NEW_ATTRIBUTE': {\n            delete action.input.data[action.nested]['']\n            action.input.data[action.nested][action.name] = ''\n            return { ...st }\n        }\n        case 'DELETE_ATTRIBUTE': {\n            delete action.input.data[action.nested][action.name]\n            return { ...st }\n        }\n    }\n    return st\n}\n\nexport const initStore = (defaultValue?: SerializedContainer):Store => {\n    const store = Object.create(null)\n    store.controls = new Map(defaultControls.registered)\n    store.container = defaultValue ? unserialize(store.controls, defaultValue) :\n        new Container(store.controls.get('row'), { direction: 'row' })\n\n    // store.elements.push(store.controls.get('select')!.createElement());\n    // [store.editing] = store.elements\n\n    return store\n}\n\nexport const useStoreReducer = (defaultValue?: SerializedContainer) =>\n    React.useReducer(storeReducer, defaultValue, initStore)\n\nexport const useProvidedStoreContext = (defaultValue?: SerializedContainer):StoreContext => {\n    const [store, dispatch] = useStoreReducer(defaultValue)\n\n    return React.useMemo<StoreContext>(() => ({ store, dispatch }), [store])\n}\n\nexport { sc as StoreContext }\n","import * as React from 'react'\nimport { CaretSquareDown } from '@styled-icons/fa-regular/CaretSquareDown'\nimport { Font } from '@styled-icons/fa-solid/Font'\nimport { GripLines } from '@styled-icons/fa-solid/GripLines'\nimport { Square } from '@styled-icons/fa-regular/Square'\nimport { Heading } from '@styled-icons/fa-solid/Heading'\nimport { Paragraph } from '@styled-icons/fa-solid/Paragraph'\nimport { GripLinesVertical } from '@styled-icons/fa-solid/GripLinesVertical'\nimport { DotCircle } from '@styled-icons/fa-solid/DotCircle'\nimport { CheckSquare } from '@styled-icons/fa-solid/CheckSquare'\n\nimport {\n    Control, RowControl, ColumnControl, InputElement, TextControl, TextElement, defaultControls,\n} from './store'\n\ntype RenderT = (key: string, value: string) => React.ReactNode\n\nconst renderOptions = (el: InputElement, rend: RenderT) => {\n    const options = el.optionPairs\n    if (options.length === 0) {\n        return rend('', '')\n    }\n    return options.map(([name, label]) => (\n        <label key={name}>{rend(name, label)}<span>{label}</span></label>\n    ))\n}\n\n\ndefaultControls.register([\n    new RowControl({\n        id: 'row',\n        name: 'Row',\n        icon: <GripLines />,\n    }),\n    new ColumnControl({\n        id: 'col',\n        name: 'Column',\n        icon: <GripLinesVertical />,\n    }),\n\n    new TextControl({\n        id: 'heading',\n        name: 'Heading',\n        icon: <Heading />,\n        placeholder(h:TextElement) { return React.createElement(h.data.tag, h.data.text) },\n    }),\n\n    new TextControl({\n        id: 'para',\n        name: 'Paragraph',\n        icon: <Paragraph />,\n        placeholder(para:TextElement) { return <p>{para.data.text}</p> },\n    }),\n\n    new Control({\n        id: 'input',\n        name: 'Text Input',\n        icon: <Font />,\n        placeholder() { return <input type='text' className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'textarea',\n        name: 'Text Area',\n        icon: <Square />,\n        placeholder() { return <textarea className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'checkbox',\n        name: 'Checkboxes',\n        icon: <CheckSquare />,\n        hasOptions: true,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input type=\"checkbox\" name={n}\n                    className={el.data.classNames.input} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'radio',\n        name: 'Radio Input',\n        hasOptions: true,\n        icon: <DotCircle />,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input key={n} type=\"radio\" name={n} className={el.data.classNames.input} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'select',\n        name: 'Select',\n        hasOptions: true,\n        icon: <CaretSquareDown />,\n        placeholder(el: InputElement) {\n            const options = el.optionPairs\n            return (\n                <select name={el.data.name}>\n                    {options.map(([v, l]) => (\n                        <option key={v} value={v}>{l}</option>\n                    ))}\n                </select>\n            )\n        },\n    }),\n])\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useDrag } from 'react-dnd'\nimport { useStore, ControlDefinition } from './store'\nimport './default-controls'\n\nconst ControlLabelEl = styled.li({\n    cursor: 'pointer',\n    backgroundColor: 'white',\n    listStyle: 'none',\n    margin: '5px',\n    padding: '10px',\n    userSelect: 'none',\n    border: '1px dashed #ddd',\n    svg: {\n        height: '20px',\n        marginRight: '0.5rem',\n    },\n})\n\nconst ControlLabel:React.FC<ControlDefinition> = ({ id, name, icon }) => {\n    const [, drag] = useDrag({\n        item: { id, type: 'control' },\n    })\n    return (\n        <ControlLabelEl ref={drag}>\n            {icon}\n            <span>{name}</span>\n        </ControlLabelEl>\n    )\n}\n\nconst ControlsListingEl = styled.div({\n    overflow: 'auto',\n    paddingRight: '10px',\n    ul: {\n        padding: 0,\n        margin: 0,\n    },\n})\nexport const ControlsListing:React.FC = () => {\n    const { controls } = useStore()\n    return (\n        <ControlsListingEl className=\"controls-listing\">\n            <ul>\n                {[...controls.values()].map(definition => (\n                    <ControlLabel key={definition.id} {...definition} />))}\n            </ul>\n        </ControlsListingEl>\n    )\n}\n","import { Ref, useEffect, useCallback, useRef, useMemo } from 'react'\n\n\ninterface Options {\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement>;\n}\n\nconst EVENT_NAME = 'keydown'\n\nconst defaultOptions = {\n\n\n}\n\n// hook from https://usehooks.com/useKeyPress/\nexport function useKeyPress(\n    keys: string | Array<string>,\n    callback: (e: KeyboardEvent) => any,\n    opts?: Options,\n): void {\n    const keyList: Array<string> = useMemo(() => {\n        if (Array.isArray(keys)) {\n            return keys\n        }\n        return [keys]\n    }, [keys])\n    const options = Object.assign({}, defaultOptions, opts) as any\n\n    const callbackRef = useRef<(e: KeyboardEvent) => any>(callback)\n    const { target } = options\n\n    useEffect(() => {\n        callbackRef.current = callback\n    })\n\n    const handle = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyList.some(identifier => e.key === identifier)) {\n                callbackRef.current(e)\n            }\n        },\n        [keyList],\n    )\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            const targetNode = target ? target.current : window\n            if (targetNode) {\n                targetNode.addEventListener(EVENT_NAME, handle)\n            }\n\n            return () => {\n                if (targetNode) {\n                    targetNode.removeEventListener(EVENT_NAME, handle)\n                }\n            }\n        }\n        return undefined\n    }, [keyList, target, callback])\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport cn from 'classnames'\nimport { useKeyPress } from '../hooks/use-key-press'\n\ninterface EditableTextProps {\n    className?: string\n    children: React.ReactNode\n    textValue: string\n    onTextSaved(text: string): void\n}\n\ninterface EditingState {\n    position: number\n}\n\n// mostly take from joelmturner.com/blog/inline-text-edit-react-hooks\n// but sets cursor position to match click position\nexport const EditableText:React.FC<EditableTextProps> = (props) => {\n    const { onTextSaved, textValue, children } = props\n\n    const [isInputActive, setIsInputActive] = useState<boolean | EditingState>(\n        false,\n    )\n    const [inputValue, setInputValue] = useState(textValue)\n\n    const wrapperRef = useRef<HTMLSpanElement>(null)\n    const textRef = useRef(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const onUpdated = ():void => {\n        if (inputRef.current && inputRef.current.value !== textValue) {\n            onTextSaved(inputRef.current.value)\n        }\n        setIsInputActive(false)\n    }\n    const onClear = ():void => {\n        setInputValue(textValue)\n        setIsInputActive(false)\n    }\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                onUpdated()\n                break\n            }\n            case 'Escape': {\n                onClear()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    useEffect(() => {\n        if (isInputActive !== false) {\n            const edit = isInputActive as EditingState\n            const input = inputRef.current!\n            input.focus()\n            input.setSelectionRange(edit.position, edit.position)\n        }\n    }, [isInputActive])\n\n    const onBlur = useCallback(() => {\n        onUpdated()\n    }, [])\n\n    const handleInputChange = useCallback(\n        event => setInputValue(event.target.value),\n        [setInputValue],\n    )\n\n    const handleSpanClick = useCallback(() => {\n        const s = window.getSelection()\n        if (!s) {\n            return\n        }\n        const range = s.getRangeAt(0)\n        setIsInputActive({\n            position: range.startOffset,\n        })\n    }, [setIsInputActive])\n    return (\n        <span className={cn('inline-text', props.className)} ref={wrapperRef}>\n            <span\n                ref={textRef}\n                onClick={handleSpanClick}\n                style={{ display: isInputActive ? 'none' : 'inline' }}\n                className='inline-text display'\n            >\n                {children}\n            </span>\n            <input\n                ref={inputRef}\n                style={{\n\n                    display: isInputActive ? 'inline' : 'none',\n                }}\n                value={inputValue}\n                onChange={handleInputChange}\n                onBlur={onBlur}\n                className='inline-text editing'\n            />\n        </span>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { useDrop, useDrag, DragElementWrapper, DragSourceOptions } from 'react-dnd'\nimport { GripHorizontal } from '@styled-icons/fa-solid/GripHorizontal'\nimport { Edit } from '@styled-icons/fa-solid/Edit'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport { EditableText } from './editable-text'\n\nimport {\n    useStore,\n    Element,\n    isContainer,\n    isText,\n    isInput,\n    InputElement,\n    TextElement,\n    useStoreContext,\n    Container,\n} from './store'\n\nconst revealColor = '#e8e8e8'\nconst dropAcceptableColor = '#c1c1c1'\n\nconst FormDropEl = styled.div({\n    minHeight: '15px',\n    border: '1px solid white',\n    '&:last-child': {\n        flex: 1,\n    },\n})\n\ninterface DropProps {\n    index: number\n    container: Container\n}\n\ninterface DropItem {\n    id: string\n    fromIndex?: number\n    fromContainer?: Container\n}\n\nconst useFormDrop = ({ index, container }: DropProps) => {\n    const sc = useStoreContext()\n    const [{ isHovered }, dropRef] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        drop: (item) => {\n            const { id, fromIndex, fromContainer } = (item as any as DropItem)\n            sc.dispatch({\n                type: 'ADD_ELEMENT',\n                id,\n                destIndex: index,\n                container,\n                fromIndex,\n                fromContainer,\n            })\n        },\n    })\n    return { isHovered, dropRef }\n}\n\nexport const FormDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n    return <FormDropEl ref={dropRef} className={cn('drop', { isHovered })} />\n}\n\nconst ElementPreviewEl = styled.div({\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n    padding: '10px',\n    color: '#0c0c0c',\n    justifyContent: 'space-between',\n    alignItems: 'stretch',\n    minHeight: '40px',\n    '&.row': {\n        '> .column': {\n            margin: '-1px',\n            flex: 1,\n        },\n        '> .container.controls': {\n            top: 'calc(50% - 22px)',\n            left: '-15px',\n            right: undefined,\n            display: 'flex',\n            flexDirection: 'column',\n            '> *': {\n                marginLeft: 0,\n            },\n        },\n    },\n\n    '&.column': {\n        flexDirection: 'column',\n        '.container-drop': {\n            width: '100%',\n        },\n        '&.empty': {\n            flex: 1,\n        },\n    },\n\n    '.control-type': {\n        fontSize: '0.8rem',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        border: '1px solid',\n        padding: '2px',\n        borderRadius: '8px',\n    },\n\n    '&:hover': {\n        backgroundColor: 'white',\n        '> .controls': {\n            opacity: 1,\n        },\n    },\n\n    '.controls': {\n        opacity: 0,\n        transition: 'opacity 0.3s ease-in-out',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'flex-start',\n        '> *': {\n            marginLeft: '15px',\n        },\n        button: {\n            border: 0,\n            padding: 0,\n            cursor: 'pointer',\n            backgroundColor: 'transparent',\n            '&:hover': {\n                svg: { color: '#212121' },\n            },\n        },\n        svg: {\n            height: '20px',\n            color: 'gray',\n            transition: 'opacity 0.3s ease-in-out',\n        },\n        '.move svg': { cursor: 'move' },\n    },\n\n    '.inline-text': {\n        padding: 0,\n        border: 0,\n        fontSize: 'inherit',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n\n    '.label': {\n        fontSize: '20px',\n        marginBottom: '5px',\n    },\n\n    '.control-preview': {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        '&.row': {\n            flexDirection: 'column',\n        },\n    },\n})\n\nconst Controls:React.FC<{\n    target: Element | Container\n    container: Container,\n    drag: DragElementWrapper<DragSourceOptions>,\n}> = ({\n    target, container, drag,\n}) => {\n    const sc = useStoreContext()\n\n    return (\n        <div className={cn('controls', { container: isContainer(target) })}>\n            <button className='trash' onClick={() => sc.dispatch({\n                type: 'DELETE', target, container,\n            })}>\n                <TrashAlt />\n            </button>\n            <button onClick={() => sc.dispatch({ type: 'EDIT', target })}>\n                <Edit />\n            </button>\n            <button className='move' ref={drag}>\n                <GripHorizontal />\n            </button>\n        </div>\n    )\n}\n\nconst InputPreview: React.FC<{\n    index: number\n    input: InputElement\n    container: Container\n}> = ({\n    index, input, container,\n}) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: input.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', input.control.id)}\n        >\n            <div className='control-preview'>\n                <span>{input.data.label}</span>\n                {input.placeholder}\n            </div>\n            <Controls target={input} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\nconst TextPreview: React.FC<{\n    index: number\n    control: TextElement\n    container: Container\n}> = ({\n    index, control, container,\n}) => {\n    const sc = useStoreContext()\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: control.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n    const text = React.createElement(control.data.tag, {}, control.data.text)\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', control.control.id)}\n        >\n            <div className='control-preview'>\n                <EditableText\n                    onTextSaved={(updated) => {\n                        sc.dispatch({ type: 'UPDATE', target: control, patch: { text: updated } })\n                    }}\n                    textValue={control.data.text}\n                >{text}</EditableText>\n            </div>\n            <Controls target={control} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\n\nconst ContainerPreviewEl = styled(ElementPreviewEl)({\n    border: '1px dashed gray',\n    minHeight: '40px',\n    borderRadius: '5px',\n    padding: '0',\n    '&.empty': {\n        alignItems: 'stretch',\n        '> .drop': {\n            flex: 1,\n        },\n    },\n    '.container.controls': {\n        position: 'absolute',\n        top: '-27px',\n        left: 'calc(50% - 15px)',\n        background: 'white',\n        padding: '2px 5px',\n        borderTopRightRadius: '5px',\n        borderTopLeftRadius: '5px',\n        border: '1px dashed gray',\n        borderBottomWidth: 0,\n    },\n    '.element-preview': {\n        flex: 1,\n    },\n    '&:hover': {\n        '.container-drop': {\n            backgroundColor: revealColor,\n        },\n    },\n})\n\nconst ContainerDropEl = styled(FormDropEl)({\n    minWidth: '20px',\n\n})\n\nconst ContainerDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n\n    return (\n        <ContainerDropEl\n            ref={dropRef}\n            className={cn('drop', 'container-drop', { isHovered })}\n        />\n    )\n}\n\nconst ContainerPreview:React.FC<{\n    container: Container\n    parent: Container\n    index: number\n}> = ({ parent, container, index }) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: container.id, fromIndex: index, fromContainer: parent, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ContainerPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('container-preview', container.direction, {\n                empty: container.children.length === 0,\n            })}\n        >\n            <ContainerDrop container={container} index={0} />\n\n            {container.children.map((el, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={el} />\n                    <ContainerDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n\n            <Controls target={container} container={parent} drag={drag} />\n\n        </ContainerPreviewEl>\n    )\n}\n\n\nconst ElementPreview:React.FC<{\n    el: Element|Container,\n    index: number,\n    container: Container,\n}> = ({ el, index, container }) => {\n    if (isContainer(el)) {\n        return <ContainerPreview parent={container} container={el} index={index} />\n    }\n    if (isText(el)) {\n        return <TextPreview control={el} container={container} index={index} />\n    }\n    if (isInput(el)) {\n        return <InputPreview input={el} container={container} index={index} />\n    }\n    return null\n}\n\n\nconst FormElementsEl = styled.div<{editing: boolean}>(({ editing }) => ({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyItems: 'flex-start',\n    background: '#fafafa',\n    padding: '10px',\n    boxSizing: 'border-box',\n    boxShadow: '0 0 2px 1px rgba(0, 0, 0, 0.1)',\n    opacity: editing ? '0.3' : '1',\n    transition: 'opacity 0.3s ease-in-out',\n    width: 'fit-content',\n    minWidth: '100%',\n    '> .container-preview': {\n        margin: '0 2px',\n    },\n    '&.isHovered': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '&:hover': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '.drop.isHovered': {\n        borderColor: 'black',\n        backgroundColor: dropAcceptableColor,\n    },\n    '.drop:hover': {\n        backgroundColor: dropAcceptableColor,\n    },\n    'p, h1, h2, h3, h4, h5, h6': {\n        padding: 0,\n        margin: 0,\n    },\n}))\nexport const FormElements = () => {\n    const { container, editing } = useStore()\n    const [{ isHovered }, drop] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        canDrop: () => false,\n    })\n    // if (!container.children.length) {\n    //     return <FormDrop container={container} index={0} />\n    // }\n\n    return (\n        <FormElementsEl ref={drop} editing={!!editing} className={cn('form-elements', { isHovered })}>\n            <FormDrop container={container} index={0} />\n            {container.children.map((e, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={e} />\n                    <FormDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n        </FormElementsEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport {\n    useStoreContext, InputElement, Element, Container, isContainer, isInput, isText, TextElement,\n} from './store'\nimport { useKeyPress } from '../hooks/use-key-press'\n\n\nconst Width:React.FC<{\n    el: Element,\n    size: string,\n}> = ({ el, size }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n\n    return (\n        <label>\n            <span>{size}:</span>\n            <input\n                ref={inputRef}\n                type=\"number\"\n                min=\"1\"\n                max=\"12\"\n                value={el.data.sizes[size] || 12}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: el,\n                    patch: { sizes: { [size]: Math.max(1, Math.min(12, Number(value))) } },\n                })}\n            />\n        </label>\n    )\n}\n\nconst Sizes:React.FC<{\n    el: Element,\n}> = ({ el }) => {\n    if (isContainer(el) && el.direction === 'row') {\n        return null\n    }\n    return (\n        <fieldset className=\"widths\">\n            <legend>Widths (1-12):</legend>\n            <div className=\"row\">\n                <Width size=\"mobile\" el={el} />\n                <Width size=\"tablet\" el={el} />\n                <Width size=\"desktop\" el={el} />\n            </div>\n        </fieldset>\n    )\n}\n\nconst NewAttribute: React.FC<{ input: InputElement; nested: string }> = ({\n    input,\n    nested,\n}) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const saveValue = () => sc.dispatch({\n        type: 'REPLACE_NEW_ATTRIBUTE', nested, input, name: inputRef.current!.value,\n    })\n    const deleteAttr = () => sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: '' })\n\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                saveValue()\n                break\n            }\n            case 'Escape': {\n                deleteAttr()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    React.useEffect(() => {\n        inputRef.current!.focus()\n    }, [])\n\n    return (\n        <label>\n            <input\n                ref={inputRef}\n                defaultValue=''\n                onBlur={saveValue}\n            />\n            <span className=\"value\" />\n            <button onClick={deleteAttr} className='del-attr'>\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\n\nconst EditAttribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string\n}> = ({ input, nested, attributeName }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    useKeyPress(['Enter', 'Tab'], (ev) => {\n        ev.preventDefault()\n        sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    }, { target: inputRef })\n    React.useEffect(() => {\n        const attrs = Object.keys(input.data[nested])\n        if (attributeName === attrs[attrs.length - 1]) {\n            inputRef.current!.focus()\n        }\n    }, [])\n    return (\n        <label>\n            <span>{attributeName}:</span>\n            <input\n                ref={inputRef}\n                className=\"value\"\n                value={input.data[nested][attributeName] || ''}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: input,\n                    patch: { [nested]: { [attributeName]: value } },\n                })}\n            />\n            <button\n                onClick={() => {\n                    sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: attributeName })\n                }}\n                className='del-attr'\n            >\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\nconst Attribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string,\n}> = ({ input, nested, attributeName }) => {\n    if ('' === attributeName) {\n        return <NewAttribute nested={nested} input={input} />\n    }\n    return <EditAttribute nested={nested} attributeName={attributeName} input={input} />\n}\n\n\nconst Options: React.FC<{\n    label: string, input: InputElement, nested: string,\n}> = ({ label, input, nested }) => {\n    const sc = useStoreContext()\n    const options = input.data[nested]\n    if (!options) {\n        return null\n    }\n    const addAttribute = () => sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    const optionNames = Object.keys(options)\n    return (\n        <fieldset className='options'>\n            <legend>{label}:</legend>\n            <div className='controls'>\n                <button onClick={addAttribute} className='add-attr'>\n                    +\n                </button>\n            </div>\n            {optionNames.length > 0 && (\n                <div className=\"heading\">\n                    <span>ID</span>\n                    <span>Value</span>\n                </div>)}\n            {optionNames.map(attrName => (\n                <Attribute\n                    key={attrName}\n                    nested={nested}\n                    input={input}\n                    attributeName={attrName}\n                />\n            ))}\n        </fieldset>\n    )\n}\n\nconst InputEdit: React.FC<{ input: InputElement }> = ({ input }) => {\n    const sc = useStoreContext()\n    const { data } = input\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: input, patch })\n\n    return (\n        <div>\n            <h4 className=\"title\">Edit {input.control.name}</h4>\n            <label>\n                <span>Label:</span>\n                <input\n                    className=\"value\"\n                    value={data.label || ''}\n                    onChange={({ target: { value } }) => dp({ label: value })}\n                />\n            </label>\n            <label>\n                <span>Name:</span>\n                <input\n                    className=\"value\"\n                    value={data.name || ''}\n                    onChange={({ target: { value } }) => dp({ name: value })}\n                />\n            </label>\n\n            <Options input={input} label=\"Options\" nested=\"options\" />\n\n            <fieldset>\n                <legend>Class Names:</legend>\n                <label>\n                    <span>Wrapper:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.wrapper || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { wrapper: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Label:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.label || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { label: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Input:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.input || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { input: value } })\n                        }\n                    />\n                </label>\n            </fieldset>\n\n            <Sizes el={input} />\n\n            <Options input={input} label=\"Attributes\" nested=\"attributes\" />\n\n        </div>\n    )\n}\n\nconst ContainerEdit: React.FC<{ container: Container }> = ({ container }) => {\n    const sc = useStoreContext()\n    const { data } = container\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: container, patch })\n\n    return (\n        <div>\n            <label>\n                <span>Class:</span>\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n            <Sizes el={container} />\n        </div>\n    )\n}\n\nconst TextHeadingSize: React.FC<{\n    txt: TextElement\n    onChange: (value: string) => void\n}> = ({ txt, onChange }) => {\n    if (txt.control.id !== 'heading') {\n        return null\n    }\n    return (\n        <label>\n            <span>Size:</span>\n            <select value={txt.data.tag} onChange={ev => onChange(ev.target.value)}>\n                <option value=\"h1\">Heading 1</option>\n                <option value=\"h2\">Heading 2</option>\n                <option value=\"h3\">Heading 3</option>\n                <option value=\"h4\">Heading 4</option>\n                <option value=\"h5\">Heading 5</option>\n                <option value=\"h6\">Heading 6</option>\n            </select>\n        </label>\n    )\n}\n\nconst TextEdit: React.FC<{ control: TextElement }> = ({ control }) => {\n    const sc = useStoreContext()\n    const { data } = control\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: control, patch })\n\n    return (\n        <div>\n            <label>\n                <span>Text:</span>\n\n                <textarea\n                    id={control.id}\n                    value={data.text || ''}\n                    onChange={({ target: { value } }) => dp({ text: value })}\n                />\n            </label>\n            <TextHeadingSize\n                txt={control}\n                onChange={(tag:string) => dp({ tag })}\n\n            />\n            <label>\n                <span>Class:</span>\n\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n            <Sizes el={control} />\n        </div>\n    )\n}\n\n\nconst Edit: React.FC<{ target: Element }> = ({ target }) => {\n    if (isContainer(target)) {\n        return <ContainerEdit container={target} />\n    }\n    if (isInput(target)) {\n        return <InputEdit input={target} />\n    }\n    if (isText(target)) {\n        return <TextEdit control={target} />\n    }\n    return null\n}\n\n\nconst EditPanelEl = styled.div<{ editing: boolean }>(({ editing }) => ({\n    position: 'absolute',\n    height: '100%',\n    width: '400px',\n    background: 'white',\n    right: editing ? '0' : '-420px',\n    transition: 'right 0.3s ease-in-out',\n    display: 'flex',\n    boxShadow: '-5px 0px 5px 0px rgba(50, 50, 50, 0.75)',\n\n    '.title': {\n        margin: '15px 0',\n        borderBottom: '1px solid lightgray',\n        paddingBottom: '10px',\n    },\n    '.edit-pane': {\n        flex: 1,\n        overflowY: 'auto',\n        padding: '10px',\n    },\n    '.footer': {\n        padding: '10px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        borderTop: '1px solid lightGrey',\n    },\n    legend: {\n        backgroundColor: '#000',\n        color: '#fff',\n        padding: '3px 6px',\n    },\n    'label, .heading': {\n        display: 'flex',\n        marginBottom: '5px',\n        '> *:first-child': {\n            width: '125px',\n        },\n    },\n    '.heading > *': {\n        fontWeight: 'bold',\n    },\n    '.value': {\n        minWidth: '150px',\n        flex: 1,\n    },\n    button: {\n        marginLeft: '1rem',\n        svg: {\n            height: '18px',\n        },\n    },\n    fieldset: {\n        marginTop: '1rem',\n        '.controls': {\n            display: 'flex',\n\n            justifyContent: 'flex-end',\n            '.add-attr': {\n                margin: '-10px -5px 10px 0',\n            },\n        },\n    },\n    textarea: {\n        width: '100%',\n        minHeight: '50px',\n        padding: '4px',\n    },\n    '.widths': {\n        '.row': {\n            display: 'flex',\n            justifyContent: 'space-between',\n            span: {\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                marginRight: '10px',\n                width: 'inherit',\n            },\n        },\n    },\n}))\n\nexport const EditPanel = () => {\n    const sc = useStoreContext()\n    const panelRef = React.useRef<HTMLDivElement>(null)\n    const { editing } = sc.store\n    React.useEffect(() => {\n        if (editing && panelRef.current) {\n            const firstInput = panelRef.current.querySelector('input,textarea')\n            if (firstInput) {\n                setTimeout(() => { // setTimeout to focus after animation completes\n                    (firstInput as HTMLInputElement).focus()\n                }, 250)\n            }\n        }\n    }, [editing])\n    return (\n        <EditPanelEl editing={!!editing}>\n            <div ref={panelRef} className='edit-pane'>\n                {editing && <Edit target={editing} />}\n            </div>\n            <div className='footer'>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => sc.dispatch({ type: 'HIDE_EDIT' })}\n                >\n                    Done\n                </button>\n            </div>\n        </EditPanelEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\nimport { ControlsListing } from './builder/controls'\nimport { useProvidedStoreContext, StoreContext, Container } from './builder/store'\nimport { FormElements } from './builder/form'\nimport { EditPanel } from './builder/edit-panel'\nimport { SerializedContainer } from './data'\n\nconst FormPanelEl = styled.div({\n    display: 'flex',\n    width: '100%',\n    overflow: 'scroll',\n})\nconst FormPanel = () => {\n    return (\n        <FormPanelEl>\n            <FormElements />\n        </FormPanelEl>\n    )\n}\n\nconst BuilderEl = styled.div({\n    display: 'grid',\n    gridTemplateColumns: '1fr 200px',\n    gridTemplateRows: '1fr',\n    height: '100%',\n    gap: '10px',\n    position: 'relative',\n    overflow: 'hidden',\n    '> *': {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n})\n\ninterface BuilderProps {\n    onChange?(form: Container): void\n    defaultValue?: SerializedContainer\n    value?: SerializedContainer\n}\n\nexport const Builder:React.FC<BuilderProps> = ({ onChange, value, defaultValue }) => {\n    const ctx = useProvidedStoreContext(defaultValue)\n    React.useEffect(() => {\n        ctx.dispatch({ type: 'REPLACE', container: value })\n    }, [value])\n    React.useEffect(() => {\n        if (onChange) { onChange(ctx.store.container) }\n    }, [onChange, ctx.store])\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <StoreContext.Provider value={ctx}>\n                <BuilderEl>\n                    <FormPanel />\n                    <ControlsListing />\n                    <EditPanel />\n                </BuilderEl>\n            </StoreContext.Provider>\n        </DndProvider>\n    )\n}\n","import {\n    isSerializedText,\n    isSerializedContainer,\n    isSerializedInput,\n    SerializedElement,\n    SerializedContainer,\n    SerializedTextElement,\n    SerializedInputElement\n} from './data'\n\nimport cx from 'classnames'\n\nclass Element {\n    data: SerializedElement\n\n    constructor(data: SerializedElement) {\n        this.data = data\n    }\n    el?:HTMLElement\n\n    createElement():HTMLElement {\n        return document.createElement('div')\n    }\n\n    render(root:HTMLElement, skipAttributes:boolean = false){\n        if (!this.el) {\n            this.el = this.createElement()\n        }\n        this.setAttributes({\n            'data-type': this.data.type,\n            'data-id': this.data.id,\n            'class': cx(this.data.className, this.sizeClassNames),\n        })\n\n        if (!skipAttributes) {\n            this.setAttributes()\n        }\n\n        if (this.el.parentElement != root) {\n            root.appendChild(this.el)\n        }\n        return this\n    }\n\n    get sizeClassNames() {\n        if (!this.data) {\n            console.log(\"NO DATA\", this)\n        }\n        const sz = this.data.sizes || {}\n\n        return cx({\n            [`col-sm-${sz.mobile}`]: sz.mobile,\n            [`col-md-${sz.tablet}`]: sz.tablet,\n            [`col-lg-${sz.desktop}`]: sz.desktop,\n        })\n    }\n\n    setAttributes(\n        attrs = this.data.attributes,\n        el:HTMLElement|undefined = this.el,\n    ) {\n        if (!el || !attrs) {\n            return\n        }\n        Object.keys(attrs).forEach((k) => {\n            el.setAttribute(k, String(attrs[k]))\n        })\n    }\n\n}\n\n// interface AttrsT { [key: string]: string | number }\n\n// const setAttributes = (el:HTMLElement, attrs:AttrsT = {}) => {\n//     Object.keys(attrs).forEach((k) => {\n//         el.setAttribute(k, String(attrs[k]))\n//     })\n// }\n\nclass TextElement extends Element {\n\n    data: SerializedTextElement\n\n    constructor(data: SerializedTextElement) {\n        super(data)\n        this.data = data\n    }\n\n    createElement():HTMLElement {\n        return document.createElement(this.data.tag)\n    }\n\n    render(root:HTMLElement) {\n        super.render(root)\n        this.el!.innerText = this.data.text\n        return this\n    }\n\n}\n\nclass InputElement extends Element {\n\n    data: SerializedInputElement\n    label?: HTMLLabelElement\n    input?: HTMLElement\n\n    constructor(data: SerializedInputElement) {\n        super(data)\n        this.data = data\n    }\n\n    render(root:HTMLElement){\n        super.render(root, true)\n\n\n        this.setAttributes({\n            class: cx(this.data.classNames.wrapper, this.sizeClassNames),\n        })\n\n        if (!this.label) {\n            this.label = document.createElement('label')\n            this.el!.appendChild(this.label)\n        }\n        this.label.className = this.data.classNames.label\n        this.label.innerText = this.data.label\n        this.label.setAttribute('for', this.data.id)\n\n        if (!this.input) {\n            const renderer = this[`_${this.data.control}`]\n            if (renderer) {\n                const input =  renderer.apply(this)\n                this.input = input as HTMLElement\n                this.input.className = this.data.classNames.input\n                this.input.id = this.data.id\n                this.el!.appendChild(this.input)\n            } else {\n                console.warn(`Can't render input type ${this.data.control}`)\n            }\n        }\n\n\n        if (this.data.options) {\n\n        }\n        return this\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n    createInput(tag: string) {\n        const input = document.createElement(tag)\n        this.setAttributes(this.data.attributes, input)\n        this.setAttributes({\n            name: this.data.name,\n            class: this.data.classNames.input,\n        }, input)\n        return input\n    }\n\n    _textarea() {\n        return this.createInput('textarea')\n    }\n\n    _input() {\n        return this.createInput('input')\n    }\n\n    renderOptions(cb: (a:string, b:string) => { [k:string]: string }) {\n        const wrapper = document.createElement('div')\n        this.setAttributes(this.data.attributes, wrapper)\n        this.optionPairs.forEach(([optId, optValue]) => {\n            const { id, inputType, name, value, label } = cb(optId, optValue)\n            const option = document.createElement('input')\n            this.setAttributes({\n                'data-id': id, type: inputType, name, value\n            }, option)\n            const labelEl = document.createElement('label')\n            labelEl.appendChild(option)\n            const txt = document.createElement('span')\n            txt.innerText = label\n            labelEl.appendChild(txt)\n            wrapper.appendChild(labelEl)\n        })\n        return wrapper\n    }\n\n    _radio() {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'radio',\n            name: this.data.name,\n            id,\n            value,\n            label: value,\n        }))\n    }\n\n    _checkbox(): HTMLDivElement {\n        return this.renderOptions((id:string, value: string) => ({\n            inputType: 'checkbox',\n            name: id,\n            value,\n            id,\n            label: value,\n        }))\n    }\n\n    _select(): HTMLSelectElement {\n        const input = document.createElement('select')\n        input.setAttribute('name', this.data.name)\n        this.optionPairs.forEach(([value, label]) => {\n            const option = document.createElement('option')\n            this.setAttributes({ value }, option)\n            option.innerText = label\n            input.appendChild(option)\n        })\n        return input\n    }\n}\n\n\nclass Container extends Element {\n    children: Array<Element>\n\n    data: SerializedContainer\n    constructor(data: SerializedContainer) {\n        super(data)\n        this.data = data\n        this.children = data.children.map(c => unserialize(c)).filter(Boolean) as Array<Element>\n    }\n\n    render(root:HTMLElement){\n        super.render(root)\n        this.el!.className = cx(this.el?.className, this.data.direction)\n        this.children.forEach(c => c.render(this.el!))\n        return this\n    }\n\n}\n\n\nconst unserialize = (data: SerializedElement):Element => {\n\n    if (isSerializedText(data)) {\n        return new TextElement(data)\n    }\n\n    if (isSerializedContainer(data)) {\n        return new Container(data)\n    }\n\n    if (isSerializedInput(data)) {\n        return new InputElement(data)\n    }\n\n    return new Element(data)\n}\n\n\nexport const render = (root: HTMLElement, container: SerializedContainer) => {\n    const form = unserialize(container)\n    form.render(root)\n}\n","import React from 'react'\nimport { Builder, Container, render } from 'formial'\nimport 'formial/dist/index.css'\n\nconst DEFAULT = {\n    \"id\":\"6ae4215f-3525-4579-9570-2aae04b8cb01\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"attributes\":{},\"direction\":\"row\",\"children\":[{\"id\":\"bd2d9c73-ad51-41a5-9e4a-a6cd7c55360c\",\"type\":\"TEXT\",\"control\":\"heading\",\"tag\":\"h2\",\"text\":\"How are you?\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12}},{\"id\":\"76aba5db-a017-4035-859d-5a7bd236a715\",\"type\":\"TEXT\",\"control\":\"para\",\"tag\":\"p\",\"text\":\"A few questions...\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12}},{\"id\":\"d6e17987-cb4b-41fc-806b-822d70ce8137\",\"type\":\"CONTAINER\",\"control\":\"row\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"attributes\":{},\"direction\":\"row\",\"children\":[{\"id\":\"5962abf3-4c66-4e27-a54f-8811a73b1c98\",\"type\":\"CONTAINER\",\"control\":\"col\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"attributes\":{},\"direction\":\"column\",\"children\":[{\"id\":\"29550f94-a533-43c1-857c-a5228a7bf728\",\"type\":\"INPUT\",\"control\":\"input\",\"label\":\"Your Name?\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"name\":\"name\",\"classNames\":{\"wrapper\":\"form-group\",\"label\":\"col-sm-2\",\"input\":\"form-control col-sm-10\"},\"attributes\":{}},{\"id\":\"4427f619-93ab-4fa8-b6de-02d374136451\",\"type\":\"INPUT\",\"control\":\"textarea\",\"label\":\"Your Message\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"name\":\"message\",\"classNames\":{\"wrapper\":\"form-group\",\"label\":\"col-sm-2\",\"input\":\"form-control col-sm-10\"},\"attributes\":{}}]},{\"id\":\"1ff69d7a-8e4e-44ca-b38f-cc030a7fffa2\",\"type\":\"CONTAINER\",\"control\":\"col\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"attributes\":{},\"direction\":\"column\",\"children\":[{\"id\":\"50920478-751b-4cf0-b18d-3e60c58c9cb8\",\"type\":\"INPUT\",\"control\":\"checkbox\",\"label\":\"Favorite Letter?\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"name\":\"fav-letter\",\"classNames\":{\"wrapper\":\"form-group\",\"label\":\"col-sm-2\",\"input\":\"form-control col-sm-10\"},\"attributes\":{},\"options\":{\"a\":\"A\",\"B\":\"B\",\"C\":\"C\"}},{\"id\":\"b75dd548-134b-4db3-98ce-7fdf1badcc71\",\"type\":\"INPUT\",\"control\":\"radio\",\"label\":\"How Many Cats?\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"name\":\"how-many-cats\",\"classNames\":{\"wrapper\":\"form-group\",\"label\":\"col-sm-2\",\"input\":\"form-control col-sm-10\"},\"attributes\":{},\"options\":{\"one\":\"1\",\"two\":\"2\",\"three\":\"3\"}},{\"id\":\"5ff73217-de33-4dc4-b5d4-9d2972f3ca82\",\"type\":\"INPUT\",\"control\":\"select\",\"label\":\"Select label\",\"className\":\"\",\"sizes\":{\"mobile\":12,\"tablet\":12,\"desktop\":12},\"name\":\"\",\"classNames\":{\"wrapper\":\"form-group\",\"label\":\"col-sm-2\",\"input\":\"form-control col-sm-10\"},\"attributes\":{},\"options\":{\"one\":\"one\",\"two\":\"two\",\"three\":\"three\"}}]}]}]\n}\n\nconst App = () => {\n    const [value, setValue] = React.useState<Container>()\n    const htmlRef = React.useRef(null)\n\n    const onChange = (container: Container) => {\n\n        setValue(container)\n    }\n\n    const renderHTML = () => {\n        console.log(value?.serialized)\n        render(htmlRef.current!, value!.serialized)\n    }\n\n    return (\n        <div id=\"example-builder\">\n            <Builder onChange={onChange} defaultValue={DEFAULT} />\n            <hr />\n            <div><button onClick={renderHTML}>Render</button></div>\n            <hr />\n            <div ref={htmlRef}></div>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}