{"version":3,"sources":["../../src/lib.ts","../../src/builder/store.ts","../../src/builder/default-controls.tsx","../../src/builder/controls.tsx","../../src/builder/form.tsx","../../src/hooks/use-key-press.ts","../../src/builder/edit-panel.tsx","../../src/builder.tsx","App.tsx","index.tsx"],"names":["uuidv4","replace","r","Math","c","v","Container","constructor","options","this","type","id","className","children","patch","Element","control","data","deepmerge","label","name","classNames","wrapper","element","attributes","placeholder","Object","key","Control","definition","RowControl","ColumnControl","defaultControls","registered","register","controls","sc","React","useStoreContext","useStore","storeReducer","st","action","store","fromContainer","fromIndex","destIndex","cntrl","console","container","addElement","e","elements","editing","undefined","initStore","Map","useProvidedStoreContext","dispatch","renderOptions","el","rend","icon","readOnly","hasOptions","n","value","ControlLabelEl","cursor","backgroundColor","listStyle","margin","padding","userSelect","border","svg","height","marginRight","ControlLabel","useDrag","item","ref","drag","ControlsListingEl","ControlsListing","FormDropEl","minHeight","flex","useFormDrop","useDrop","accept","collect","isHovered","drop","dropRef","FormDrop","props","cn","ElementPreviewEl","display","flexDirection","position","color","justifyContent","alignItems","top","left","right","marginLeft","width","fontSize","borderRadius","opacity","transition","button","outline","marginBottom","flexWrap","ControlPreview","monitor","preview","style","onClick","ContainerPreviewEl","background","borderTopRightRadius","borderTopLeftRadius","borderBottomWidth","ContainerDropEl","minWidth","ContainerDrop","ContainerPreview","index","empty","i","ElementPreview","parent","FormElementsEl","justifyItems","boxSizing","boxShadow","borderColor","FormElements","canDrop","defaultOptions","useKeyPress","keys","callback","opts","keyList","useMemo","Array","callbackRef","useRef","target","useEffect","handle","useCallback","identifier","window","targetNode","NewAttribute","nested","inputRef","saveValue","deleteAttr","ev","defaultValue","onBlur","EditAttribute","attributeName","attrs","onChange","Attribute","Options","optionNames","attrName","Edit","dp","EditPanelEl","overflowY","borderTop","legend","fontWeight","fieldset","marginTop","EditPanel","FormPanelEl","overflow","FormPanel","ControlsPanel","BuilderEl","gridTemplateColumns","gridTemplateRows","gap","Builder","ctx","backend","HTML5Backend","StoreContext","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45c2071e.chunk.js","sourcesContent":["// uses Math.random which may only be pseudo random\nexport function uuidv4():string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","import * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport { uuidv4 } from '../lib'\n\n\nexport interface ControlDefinition {\n    id: string\n    icon: React.ReactNode\n    name: string\n    placeholder?(element: Element): React.ReactNode\n    hasOptions?: boolean\n}\n\nexport interface Store {\n    controls: Map<string, Control>,\n    elements: Array<Element>\n    container: Container\n    editing?: Element\n}\n\nexport interface ContainerDefinition {\n    id?: string\n    type: 'row' | 'column'\n    className?: string\n    children?: Array<Element | Container>\n}\n\nexport function isContainerOrElement(\n    toBeDetermined: Container|Element,\n): toBeDetermined is Container {\n    if ((toBeDetermined as Container).type) {\n        return true\n    }\n    return false\n}\n\nexport class Container {\n\n    id: string\n    type: 'row' | 'column'\n    className: string\n    children: Array<Element | Container>\n\n    constructor(options: ContainerDefinition) {\n        this.id = options.id || uuidv4()\n        this.type = options.type\n        this.className = options.className || this.type === 'row' ? 'row' : 'col'\n        this.children = options.children || []\n    }\n\n    merge(patch: any): Container {\n        return new Container({\n            id: this.id,\n            type: this.type,\n            className: this.className,\n            children: [...patch.children || []],\n        })\n    }\n\n    clone() {\n        return new Container({\n            id: this.id,\n            type: this.type,\n            className: this.className,\n            children: [...this.children],\n        })\n    }\n\n}\n\nexport interface ElementData {\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        element: string\n    }\n    attributes: object\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport class Element {\n\n    id: string\n    control: Control\n    data: ElementData\n\n    constructor(control: Control, data = {}) {\n        this.control = control\n        this.id = uuidv4()\n        this.data = deepmerge(data, {\n            label: `${this.control.name} label`,\n            name: '',\n            classNames: {\n                wrapper: 'form-wrapper',\n                label: 'col-sm-2',\n                element: 'form-control col-sm-10',\n            },\n            attributes: {},\n        })\n        if (control.hasOptions) {\n            this.data.options = {}\n        }\n    }\n\n    get placeholder(): React.ReactNode {\n        return (this.control.placeholder && this.control.placeholder(this)) || null\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n}\n\n\nexport class Control implements ControlDefinition {\n\n    id: string\n    name: string\n    icon: React.ReactNode\n\n    hasOptions?: boolean\n    placeholder?: (element: Element) => React.ReactNode\n\n    constructor(definition: ControlDefinition) {\n        this.name = definition.name\n        this.id = definition.id\n        this.icon = definition.icon\n        this.placeholder = definition.placeholder\n        this.hasOptions = definition.hasOptions\n    }\n\n    createElement(): Element | Container {\n        return new Element(this)\n    }\n\n}\n\n\nexport class RowControl extends Control {\n\n    createElement(): Element | Container {\n        return new Container({ type: 'row' })\n    }\n\n}\n\n\nexport class ColumnControl extends Control {\n\n    createElement(): Element | Container {\n        return new Container({ type: 'column' })\n    }\n\n}\n\n\nexport const defaultControls = {\n    registered: new Map<string, Control>(),\n\n    register(controls: Array<Control>) {\n        controls.forEach(c => this.registered.set(c.id, c))\n    },\n}\n\ninterface InsertElementOptions {\n    id: string,\n    container: Container, destIndex: number,\n    fromIndex?: number, fromContainer?: Container\n}\nexport function addElement(\n    store: Store,\n    {\n        id, container, destIndex, fromIndex, fromContainer,\n    }: InsertElementOptions,\n): Store {\n    let cntrl: Control | undefined\n    let element: Element| Container | undefined\n\n    if (fromIndex != null && fromContainer) {\n        element = fromContainer.children[fromIndex]\n        fromContainer.children.splice(fromIndex, 1)\n        if (fromContainer === container && fromIndex < destIndex) {\n            destIndex -= 1 // eslint-disable-line no-param-reassign\n        }\n    } else {\n        cntrl = store.controls.get(id)\n        if (!cntrl) {\n            // eslint-disable-next-line no-console\n            console.warn(`attempted to drop id ${id} but no control exists`)\n            return store\n        }\n    }\n    if (!element && cntrl) {\n        element = cntrl.createElement()\n    }\n    if (element) {\n        container.children.splice(destIndex, 0, element)\n    }\n    return { ...store }\n}\n\ninterface StoreContext {\n    store: Store\n    dispatch: React.Dispatch<Action> //  (patch:any): void\n}\n\nconst sc = React.createContext(null as any as StoreContext)\n\nexport const useStoreContext = ():StoreContext => React.useContext(sc)\n\nexport const useStore = ():Store => useStoreContext().store\n\n\ntype Action =\n    | { type: 'test', index: number }\n    | { type: 'ADD_ELEMENT', id: string,\n        container: Container, destIndex: number,\n        fromIndex?: number, fromContainer?: Container }\n    | { type: 'DEL_ELEMENT', element: Element | Container, container: Container }\n    | { type: 'UPDATE_ELEMENT', element: Element, patch: any }\n    | { type: 'EDIT_ELEMENT', element: Element }\n    | { type: 'HIDE_ELEMENT_EDIT' }\n    | { type: 'ADD_ATTRIBUTE', element: Element, nested: string }\n    | { type: 'REPLACE_NEW_ATTRIBUTE', element: Element, nested: string, name: string, }\n    | { type: 'DELETE_ATTRIBUTE', element: Element, nested: string, name: string }\n\n\nconst storeReducer = (st:Store, action: Action): Store => {\n    switch (action.type) {\n        case 'ADD_ELEMENT': {\n            return addElement(st, action)\n        }\n        case 'DEL_ELEMENT': {\n            action.container.children = [\n                ...action.container.children.filter(e => e.id !== action.element.id),\n            ]\n            return { ...st }\n        }\n        case 'UPDATE_ELEMENT': {\n            action.element.data = deepmerge(action.element.data, action.patch)\n            return { ...st, elements: [...st.elements] }\n        }\n        case 'EDIT_ELEMENT': {\n            return { ...st, editing: action.element }\n        }\n        case 'HIDE_ELEMENT_EDIT': {\n            return { ...st, editing: undefined }\n        }\n        case 'ADD_ATTRIBUTE': {\n            action.element.data[action.nested][''] = ''\n            return { ...st, elements: [...st.elements] }\n        }\n        case 'REPLACE_NEW_ATTRIBUTE': {\n            delete action.element.data[action.nested]['']\n            action.element.data[action.nested][action.name] = ''\n            return { ...st, elements: [...st.elements] }\n        }\n        case 'DELETE_ATTRIBUTE': {\n            delete action.element.data[action.nested][action.name]\n            return { ...st, elements: [...st.elements] }\n        }\n    }\n\n    return st\n}\n\nexport const initStore = ():Store => {\n    const store = Object.create(null)\n    store.controls = new Map(defaultControls.registered)\n    store.elements = []\n    store.container = new Container({ type: 'row' })\n\n    // store.elements.push(store.controls.get('select')!.createElement());\n    // [store.editing] = store.elements\n\n    return store\n}\n\nexport const useStoreReducer = () => React.useReducer(storeReducer, {}, initStore)\n\nexport const useProvidedStoreContext = ():StoreContext => {\n    const [store, dispatch] = useStoreReducer()\n\n    return React.useMemo<StoreContext>(() => ({ store, dispatch }), [store])\n}\n\nexport { sc as StoreContext }\n","import * as React from 'react'\nimport { CaretSquareDown } from '@styled-icons/fa-regular/CaretSquareDown'\nimport { Font } from '@styled-icons/fa-solid/Font'\nimport { GripLines } from '@styled-icons/fa-solid/GripLines'\nimport { GripLinesVertical } from '@styled-icons/fa-solid/GripLinesVertical'\nimport { DotCircle } from '@styled-icons/fa-solid/DotCircle'\nimport { CheckSquare } from '@styled-icons/fa-solid/CheckSquare'\n\nimport { Control, RowControl, ColumnControl, Element, defaultControls } from './store'\n\ntype RenderT = (key: string, value: string) => React.ReactNode\n\nconst renderOptions = (el: Element, rend: RenderT) => {\n    const options = el.optionPairs\n    if (options.length === 0) {\n        return rend('', '')\n    }\n    return options.map(([name, label]) => (\n        <label key={name}>{rend(name, label)}<span>{label}</span></label>\n    ))\n}\n\n\ndefaultControls.register([\n    new RowControl({\n        id: 'row',\n        name: 'Row',\n        icon: <GripLines />,\n    }),\n    new ColumnControl({\n        id: 'col',\n        name: 'Column',\n        icon: <GripLinesVertical />,\n    }),\n    new Control({\n        id: 'input',\n        name: 'Text Input',\n        icon: <Font />,\n        placeholder() { return <input type='text' className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'checkbox',\n        name: 'Checkboxes',\n        icon: <CheckSquare />,\n        hasOptions: true,\n        placeholder(el: Element) {\n            return renderOptions(el, (n: string) => (\n                <input type=\"checkbox\" name={n}\n                    className={el.data.classNames.element} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'radio',\n        name: 'Radio Input',\n        icon: <DotCircle />,\n        placeholder(el: Element) {\n            return renderOptions(el, (n: string) => (\n                <input key={n} type=\"radio\" name={n} className={el.data.classNames.element} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'select',\n        name: 'Select',\n        hasOptions: true,\n        icon: <CaretSquareDown />,\n        placeholder(el: Element) {\n            const options = el.optionPairs\n            return (\n                <select name={el.data.name}>\n                    {options.map(([v, l]) => (\n                        <option key={v} value={v}>{l}</option>\n                    ))}\n                </select>\n            )\n        },\n    }),\n])\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useDrag } from 'react-dnd'\nimport { useStore, ControlDefinition } from './store'\nimport './default-controls'\n\nconst ControlLabelEl = styled.li({\n    cursor: 'pointer',\n    backgroundColor: 'white',\n    listStyle: 'none',\n    margin: '5px',\n    padding: '10px',\n    userSelect: 'none',\n    border: '1px dashed #ddd',\n    svg: {\n        height: '20px',\n        marginRight: '0.5rem',\n    },\n})\n\nconst ControlLabel:React.FC<ControlDefinition> = ({ id, name, icon }) => {\n    const [, drag] = useDrag({\n        item: { id, type: 'control' },\n    })\n    return (\n        <ControlLabelEl ref={drag}>\n            {icon}\n            <span>{name}</span>\n        </ControlLabelEl>\n    )\n}\n\nconst ControlsListingEl = styled.ul({\n    padding: 0,\n})\nexport const ControlsListing:React.FC = () => {\n    const { controls } = useStore()\n    return (\n        <ControlsListingEl>\n            {[...controls.values()].map(definition => (\n                <ControlLabel key={definition.id} {...definition} />))}\n        </ControlsListingEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { useDrop, useDrag } from 'react-dnd'\nimport { GripHorizontal } from '@styled-icons/fa-solid/GripHorizontal'\nimport { Edit } from '@styled-icons/fa-solid/Edit'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\n\nimport {\n    useStore,\n    Element,\n    isContainerOrElement,\n    useStoreContext,\n    Container,\n} from './store'\n\nconst revealColor = '#e8e8e8'\nconst dropAcceptableColor = '#c1c1c1'\n\nconst FormDropEl = styled.div({\n    minHeight: '15px',\n    border: '1px solid white',\n    '&:last-child': {\n        flex: 1,\n    },\n})\n\ninterface DropProps {\n    index: number\n    container: Container\n}\n\ninterface DropItem {\n    id: string\n    fromIndex?: number\n    fromContainer?: Container\n}\n\nconst useFormDrop = ({ index, container }: DropProps) => {\n    const sc = useStoreContext()\n    const [{ isHovered }, dropRef] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        drop: (item) => {\n            const { id, fromIndex, fromContainer } = (item as any as DropItem)\n            sc.dispatch({\n                type: 'ADD_ELEMENT',\n                id,\n                destIndex: index,\n                container,\n                fromIndex,\n                fromContainer,\n            })\n        },\n    })\n    return { isHovered, dropRef }\n}\n\nexport const FormDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n    return <FormDropEl ref={dropRef} className={cn('drop', { isHovered })} />\n}\n\nconst ElementPreviewEl = styled.div({\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n    padding: '10px',\n    color: '#0c0c0c',\n    justifyContent: 'space-between',\n    alignItems: 'stretch',\n    '&.row': {\n        '> .column': {\n            margin: '-1px',\n            flex: 1,\n        },\n        '> .container.controls': {\n            top: 'calc(50% - 22px)',\n            left: '-15px',\n            right: undefined,\n            display: 'flex',\n            flexDirection: 'column',\n            '> *': {\n                marginLeft: 0,\n            },\n        },\n    },\n\n    '&.column': {\n        flexDirection: 'column',\n        '.container-drop': {\n            width: '100%',\n        },\n        '&.empty': {\n            flex: 1,\n        },\n    },\n\n    '.control-type': {\n        fontSize: '0.8rem',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        border: '1px solid',\n        padding: '2px',\n        borderRadius: '8px',\n    },\n\n    '&:hover': {\n        backgroundColor: 'white',\n        '> .controls': {\n            opacity: 1,\n        },\n    },\n\n    '.controls': {\n        opacity: 0,\n        transition: 'opacity 0.3s ease-in-out',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'flex-start',\n        '> *': {\n            marginLeft: '15px',\n        },\n        button: {\n            border: 0,\n            padding: 0,\n            cursor: 'pointer',\n            backgroundColor: 'transparent',\n            '&:hover': {\n                svg: { color: '#212121' },\n            },\n        },\n        svg: {\n            height: '20px',\n            color: 'gray',\n            transition: 'opacity 0.3s ease-in-out',\n        },\n        '.move svg': { cursor: 'move' },\n    },\n\n    '.inline-text': {\n        padding: 0,\n        border: 0,\n        fontSize: 'inherit',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n\n    '.label': {\n        fontSize: '20px',\n        marginBottom: '5px',\n    },\n\n    '.control-preview': {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        '&.row': {\n            flexDirection: 'column',\n        },\n    },\n})\n\nconst ControlPreview: React.FC<{\n    index: number\n    element: Element\n    container: Container\n}> = ({ index, element, container }) => {\n    const sc = useStoreContext()\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: element.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', element.control.id)}\n        >\n            <div className='control-preview'>\n                <span>{element.data.label}</span>\n                {element.placeholder}\n            </div>\n            <div className='controls'>\n                <button className='trash' onClick={() => sc.dispatch({\n                    type: 'DEL_ELEMENT', element, container,\n                })}>\n                    <TrashAlt />\n                </button>\n                <button onClick={() => sc.dispatch({ type: 'EDIT_ELEMENT', element })}>\n                    <Edit />\n                </button>\n                <button className='move' ref={drag}>\n                    <GripHorizontal />\n                </button>\n            </div>\n        </ElementPreviewEl>\n    )\n}\n\nconst ContainerPreviewEl = styled(ElementPreviewEl)({\n    border: '1px dashed gray',\n    minHeight: '40px',\n    borderRadius: '5px',\n    padding: '0',\n    '&.empty': {\n        alignItems: 'stretch',\n        '> .drop': {\n            flex: 1,\n        },\n    },\n    '.container.controls': {\n        position: 'absolute',\n        top: '-27px',\n        left: 'calc(50% - 15px)',\n        background: 'white',\n        padding: '2px 5px',\n        borderTopRightRadius: '5px',\n        borderTopLeftRadius: '5px',\n        border: '1px dashed gray',\n        borderBottomWidth: 0,\n    },\n    '.element-preview': {\n        flex: 1,\n    },\n    '&:hover': {\n        '.container-drop': {\n            backgroundColor: revealColor,\n        },\n    },\n})\n\nconst ContainerDropEl = styled(FormDropEl)({\n    minWidth: '20px',\n\n})\n\nconst ContainerDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n\n    return (\n        <ContainerDropEl\n            ref={dropRef}\n            className={cn('drop', 'container-drop', { isHovered })}\n        />\n    )\n}\n\nconst ContainerPreview:React.FC<{\n    container: Container\n    parent: Container\n    index: number\n}> = ({ parent, container, index }) => {\n    const sc = useStoreContext()\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: container.id, fromIndex: index, fromContainer: parent, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ContainerPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('container-preview', container.type, {\n                empty: container.children.length === 0,\n            })}\n        >\n            <ContainerDrop container={container} index={0} />\n\n            {container.children.map((el, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={el} />\n                    <ContainerDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n\n\n            <div className='controls container'>\n                <button className='trash' onClick={() => sc.dispatch({ type: 'DEL_ELEMENT', container: parent, element: container })}>\n                    <TrashAlt />\n                </button>\n\n                <button className='move' ref={drag}>\n                    <GripHorizontal />\n                </button>\n            </div>\n\n        </ContainerPreviewEl>\n    )\n}\n\n\nconst ElementPreview:React.FC<{\n    el: Element|Container,\n    index: number,\n    container: Container,\n}> = ({ el, index, container }) => {\n    if (isContainerOrElement(el)) {\n        return <ContainerPreview parent={container} container={el} index={index} />\n    }\n    return <ControlPreview container={container} element={el} index={index} />\n}\n\n\nconst FormElementsEl = styled.div<{editing: boolean}>(({ editing }) => ({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyItems: 'flex-start',\n    background: '#fafafa',\n    padding: '10px',\n    boxSizing: 'border-box',\n    boxShadow: '0 0 2px 1px rgba(0, 0, 0, 0.1)',\n    opacity: editing ? '0.3' : '1',\n    transition: 'opacity 0.3s ease-in-out',\n    width: 'fit-content',\n    minWidth: '100%',\n    '> .container-preview': {\n        margin: '0 2px',\n    },\n    '&.isHovered': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '&:hover': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '.drop.isHovered': {\n        borderColor: 'black',\n        backgroundColor: dropAcceptableColor,\n    },\n    '.drop:hover': {\n        backgroundColor: dropAcceptableColor,\n    },\n}))\nexport const FormElements = () => {\n    const { container, editing } = useStore()\n    const [{ isHovered }, drop] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        canDrop: () => false,\n    })\n    // if (!container.children.length) {\n    //     return <FormDrop container={container} index={0} />\n    // }\n\n    return (\n        <FormElementsEl ref={drop} editing={!!editing} className={cn('form-elements', { isHovered })}>\n            <FormDrop container={container} index={0} />\n            {container.children.map((e, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={e} />\n                    <FormDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n        </FormElementsEl>\n    )\n}\n","import { Ref, useEffect, useCallback, useRef, useMemo } from 'react'\n\n\ninterface Options {\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement>;\n}\n\nconst EVENT_NAME = 'keydown'\n\nconst defaultOptions = {\n\n\n}\n\n// hook from https://usehooks.com/useKeyPress/\nexport function useKeyPress(\n    keys: string | Array<string>,\n    callback: (e: KeyboardEvent) => any,\n    opts?: Options,\n): void {\n    const keyList: Array<string> = useMemo(() => {\n        if (Array.isArray(keys)) {\n            return keys\n        }\n        return [keys]\n    }, [keys])\n    const options = Object.assign({}, defaultOptions, opts) as any\n\n    const callbackRef = useRef<(e: KeyboardEvent) => any>(callback)\n    const { target } = options\n\n    useEffect(() => {\n        callbackRef.current = callback\n    })\n\n    const handle = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyList.some(identifier => e.key === identifier)) {\n                callbackRef.current(e)\n            }\n        },\n        [keyList],\n    )\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            const targetNode = target ? target.current : window\n            if (targetNode) {\n                targetNode.addEventListener(EVENT_NAME, handle)\n            }\n\n            return () => {\n                if (targetNode) {\n                    targetNode.removeEventListener(EVENT_NAME, handle)\n                }\n            }\n        }\n        return undefined\n    }, [keyList, target, callback])\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport { useStoreContext, Element } from './store'\nimport { useKeyPress } from '../hooks/use-key-press'\n\nconst NewAttribute: React.FC<{ element: Element; nested: string }> = ({\n    element,\n    nested,\n}) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const saveValue = () => sc.dispatch({\n        type: 'REPLACE_NEW_ATTRIBUTE', nested, element, name: inputRef.current!.value,\n    })\n    const deleteAttr = () => sc.dispatch({ type: 'DELETE_ATTRIBUTE', element, nested, name: '' })\n\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                saveValue()\n                break\n            }\n            case 'Escape': {\n                deleteAttr()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    React.useEffect(() => {\n        inputRef.current!.focus()\n    }, [])\n\n    return (\n        <label>\n            <input\n                ref={inputRef}\n                defaultValue=''\n                onBlur={saveValue}\n            />\n            <span className=\"value\" />\n            <button onClick={deleteAttr} className='del-attr'>\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\n\nconst EditAttribute: React.FC<{\n    element: Element\n    nested: string\n    attributeName: string\n}> = ({ element, nested, attributeName }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    useKeyPress(['Enter', 'Tab'], (ev) => {\n        ev.preventDefault()\n        sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, element })\n    }, { target: inputRef })\n    React.useEffect(() => {\n        const attrs = Object.keys(element.data[nested])\n        if (attributeName === attrs[attrs.length - 1]) {\n            inputRef.current!.focus()\n        }\n    }, [])\n    return (\n        <label>\n            <span>{attributeName}:</span>\n            <input\n                ref={inputRef}\n                className=\"value\"\n                value={element.data[nested][attributeName] || ''}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE_ELEMENT',\n                    element,\n                    patch: { [nested]: { [attributeName]: value } },\n                })}\n            />\n            <button\n                onClick={() => {\n                    sc.dispatch({ type: 'DELETE_ATTRIBUTE', element, nested, name: attributeName })\n                }}\n                className='del-attr'\n            >\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\nconst Attribute: React.FC<{\n    element: Element\n    nested: string\n    attributeName: string,\n}> = ({ element, nested, attributeName }) => {\n    if ('' === attributeName) {\n        return <NewAttribute nested={nested} element={element} />\n    }\n    return <EditAttribute nested={nested} attributeName={attributeName} element={element} />\n}\n\n\nconst Options: React.FC<{\n    label: string, element: Element, nested: string\n}> = ({ label, element, nested }) => {\n    const sc = useStoreContext()\n    const options = element.data[nested]\n    if (!options) {\n        return null\n    }\n    const addAttribute = () => sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, element })\n    const optionNames = Object.keys(options)\n    return (\n        <fieldset className='options'>\n            <legend>{label}:</legend>\n            <div className='controls'>\n                <button onClick={addAttribute} className='add-attr'>\n                    +\n                </button>\n            </div>\n            {optionNames.length > 0 && (\n                <div className=\"heading\">\n                    <span>ID</span>\n                    <span>Value</span>\n                </div>)}\n            {optionNames.map(attrName => (\n                <Attribute\n                    key={attrName}\n                    nested={nested}\n                    element={element}\n                    attributeName={attrName}\n                />\n            ))}\n        </fieldset>\n    )\n}\n\nconst Edit: React.FC<{ element: Element }> = ({ element }) => {\n    const sc = useStoreContext()\n    const { data } = element\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE_ELEMENT', element, patch })\n\n    return (\n        <div>\n            <h4>Edit {element.control.name}</h4>\n            <label>\n                <span>Label:</span>\n                <input\n                    className=\"value\"\n                    value={data.label || ''}\n                    onChange={({ target: { value } }) => dp({ label: value })}\n                />\n            </label>\n            <label>\n                <span>Name:</span>\n                <input\n                    className=\"value\"\n                    value={data.name || ''}\n                    onChange={({ target: { value } }) => dp({ name: value })}\n                />\n            </label>\n            <fieldset>\n                <legend>Class Names:</legend>\n                <label>\n                    <span>Wrapper:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.wrapper || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { wrapper: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Label:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.label || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { label: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Element:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.element || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { element: value } })\n                        }\n                    />\n                </label>\n            </fieldset>\n\n            <Options element={element} label=\"Options\" nested=\"options\" />\n            <Options element={element} label=\"Attributes\" nested=\"attributes\" />\n\n        </div>\n    )\n}\n\nconst EditPanelEl = styled.div<{ editing: boolean }>(({ editing }) => ({\n    position: 'absolute',\n    height: '100%',\n    width: '400px',\n    background: 'white',\n    right: editing ? '0' : '-420px',\n    transition: 'right 0.3s ease-in-out',\n    display: 'flex',\n    boxShadow: '-5px 0px 5px 0px rgba(50, 50, 50, 0.75)',\n    '.edit-pane': {\n        flex: 1,\n        overflowY: 'auto',\n        padding: '10px',\n    },\n    '.footer': {\n        padding: '20px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        borderTop: '1px solid lightGrey',\n    },\n    legend: {\n        backgroundColor: '#000',\n        color: '#fff',\n        padding: '3px 6px',\n    },\n    'label, .heading': {\n        display: 'flex',\n        marginBottom: '5px',\n        '> *:first-child': {\n            width: '125px',\n        },\n        // '> *:last-child': {\n        //     flex: 1,\n        // },\n    },\n    '.heading > *': {\n        fontWeight: 'bold',\n    },\n    '.value': {\n        minWidth: '150px',\n        flex: 1,\n    },\n    button: {\n        marginLeft: '1rem',\n        svg: {\n            height: '18px',\n        },\n    },\n    fieldset: {\n        marginTop: '1rem',\n        '.controls': {\n            display: 'flex',\n\n            justifyContent: 'flex-end',\n            '.add-attr': {\n                margin: '-10px -5px 10px 0',\n            },\n        },\n    },\n}))\n\nexport const EditPanel = () => {\n    const sc = useStoreContext()\n    const { editing } = sc.store\n    return (\n        <EditPanelEl editing={!!editing}>\n            <div className='edit-pane'>\n                {editing && <Edit element={editing} />}\n            </div>\n            <div className='footer'>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => sc.dispatch({ type: 'HIDE_ELEMENT_EDIT' })}\n                >\n                    Done\n                </button>\n            </div>\n        </EditPanelEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\nimport { ControlsListing } from './builder/controls'\nimport { useProvidedStoreContext, StoreContext } from './builder/store'\nimport { FormElements } from './builder/form'\nimport { EditPanel } from './builder/edit-panel'\n\nconst FormPanelEl = styled.div({\n    display: 'flex',\n    width: '100%',\n    overflow: 'scroll',\n})\nconst FormPanel = () => {\n    return (\n        <FormPanelEl>\n            <FormElements />\n        </FormPanelEl>\n    )\n}\n\nconst ControlsPanel = () => {\n    return (\n        <div>\n            <ControlsListing />\n        </div>\n    )\n}\n\nconst BuilderEl = styled.div({\n    display: 'grid',\n    gridTemplateColumns: '1fr 200px',\n    gridTemplateRows: '1fr',\n    height: '100%',\n    gap: '10px',\n    position: 'relative',\n    overflow: 'hidden',\n    '> *': {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n})\nexport const Builder = () => {\n    const ctx = useProvidedStoreContext()\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <StoreContext.Provider value={ctx}>\n                <BuilderEl>\n                    <FormPanel />\n                    <ControlsPanel />\n                    <EditPanel />\n                </BuilderEl>\n            </StoreContext.Provider>\n        </DndProvider>\n    )\n}\n","import React from 'react'\n\nimport { Builder } from 'formial'\nimport 'formial/dist/index.css'\n\nconst App = () => {\n  \n  return (\n    <div id=\"example-builder\">\n      <Builder />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}