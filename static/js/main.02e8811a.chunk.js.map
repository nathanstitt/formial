{"version":3,"sources":["../../src/lib.ts","../../src/builder/store.ts","../../src/builder/default-controls.tsx","../../src/builder/controls.tsx","../../src/builder/form.tsx","../../src/hooks/use-key-press.ts","../../src/builder/edit-panel.tsx","../../src/builder.tsx","App.tsx","index.tsx"],"names":["uuidv4","replace","r","Math","c","v","Element","constructor","control","data","this","deepmerge","className","sizes","mobile","tablet","desktop","TextElement","tag","text","Container","options","InputElement","label","name","classNames","wrapper","input","attributes","placeholder","Object","key","Control","definition","isContainer","toBeDetermined","isInput","isText","RowControl","type","TextControl","ColumnControl","defaultControls","registered","register","controls","sc","React","useStoreContext","useStore","storeReducer","st","action","store","fromContainer","fromIndex","element","destIndex","cntrl","console","container","addElement","e","editing","target","undefined","initStore","Map","useProvidedStoreContext","dispatch","renderOptions","el","rend","id","icon","h","para","readOnly","hasOptions","n","value","ControlLabelEl","cursor","backgroundColor","listStyle","margin","padding","userSelect","border","svg","height","marginRight","ControlLabel","useDrag","item","ref","drag","ControlsListingEl","overflow","paddingRight","ul","ControlsListing","FormDropEl","minHeight","flex","useFormDrop","useDrop","accept","collect","isHovered","drop","dropRef","FormDrop","props","cn","ElementPreviewEl","display","flexDirection","position","color","justifyContent","alignItems","top","left","right","marginLeft","width","fontSize","borderRadius","opacity","transition","button","outline","marginBottom","flexWrap","Controls","onClick","InputPreview","monitor","preview","style","TextPreview","ContainerPreviewEl","background","borderTopRightRadius","borderTopLeftRadius","borderBottomWidth","ContainerDropEl","minWidth","ContainerDrop","ContainerPreview","index","empty","i","parent","ElementPreview","FormElementsEl","justifyItems","boxSizing","boxShadow","borderColor","FormElements","canDrop","defaultOptions","useKeyPress","keys","callback","opts","keyList","useMemo","Array","callbackRef","useRef","useEffect","handle","useCallback","identifier","window","targetNode","Width","size","inputRef","min","max","onChange","patch","Number","Sizes","NewAttribute","nested","saveValue","deleteAttr","ev","defaultValue","onBlur","EditAttribute","attributeName","attrs","Attribute","Options","optionNames","attrName","InputEdit","dp","ContainerEdit","TextHeadingSize","txt","TextEdit","Edit","EditPanelEl","borderBottom","paddingBottom","overflowY","borderTop","legend","fontWeight","fieldset","marginTop","textarea","span","EditPanel","panelRef","firstInput","setTimeout","FormPanelEl","FormPanel","BuilderEl","gridTemplateColumns","gridTemplateRows","gap","Builder","ctx","backend","HTML5Backend","StoreContext","log","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02e8811a.chunk.js","sourcesContent":["// uses Math.random which may only be pseudo random\nexport function uuidv4():string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n","import * as React from 'react'\nimport deepmerge from 'deepmerge'\nimport { uuidv4 } from '../lib'\n\n\nexport interface ControlDefinition {\n    id: string\n    icon: React.ReactNode\n    name: string\n    placeholder?(element: Element): React.ReactNode\n    hasOptions?: boolean\n}\n\nexport interface SizeData {\n    mobile: number\n    tablet: number\n    desktop: number\n}\n\nexport interface Store {\n    controls: Map<string, Control>,\n    container: Container\n    editing?: Element\n}\n\nexport interface ElementData {\n    className: string\n    sizes: SizeData\n}\n\nconst defaultSizes = ():SizeData => ({\n    mobile: 12,\n    tablet: 12,\n    desktop: 12,\n})\n\nexport class Element {\n    id: string\n    control: Control\n    data: ElementData\n    constructor(control: Control, data = {}) {\n        this.control = control\n        this.id = uuidv4()\n        this.data = deepmerge({\n            className: '',\n            sizes: defaultSizes(),\n        }, data)\n    }\n\n}\n\ninterface ContainerData extends ElementData {\n    children: Array<Element>\n}\n\n\nexport interface ContainerOptions {\n    id?: string\n    type: 'row' | 'column'\n    data?: ContainerData\n    children?: Array<Element>\n}\n\ninterface TextData extends ElementData {\n    tag: string\n    text: string\n}\n\nexport class TextElement extends Element {\n    data: TextData\n\n    constructor(control:Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge.all([(this as this).data, {\n            tag: control.id == 'para' ? 'p' : 'h3',\n            text: 'Some text…'\n        }, data]) as TextData\n    }\n}\n\nexport class Container extends Element {\n    type: 'row' | 'column'\n    children: Array<Element>\n    constructor(control:Control, options: ContainerOptions) {\n        super(control, options)\n        this.type = options.type\n        this.children = options.children || []\n    }\n\n    // merge(patch: any): Container {\n    //     return new Container({\n    //         id: this.id,\n    //         type: this.type,\n    //         data: deepmerge(this.data, patch.data),\n    //         children: [...patch.children || []],\n    //     })\n    // }\n\n    // clone() {\n    //     return new Container({\n    //         id: this.id,\n    //         type: this.type,\n    //         data: {...this.data },\n    //         children: [...this.children],\n    //     })\n    // }\n\n}\n\n\n\nexport interface InputData extends ElementData {\n    label: string\n    name: string\n    classNames: {\n        wrapper: string\n        label: string\n        input: string\n    }\n    sizes: SizeData\n    attributes: object\n    options?: {\n        [value: string]: string\n    }\n}\n\nexport class InputElement extends Element {\n    data: InputData\n\n    constructor(control: Control, data = {}) {\n        super(control, data)\n        this.data = deepmerge(data, {\n            label: `${this.control.name} label`,\n            className: '',\n            sizes: defaultSizes(),\n            name: '',\n            classNames: {\n                wrapper: 'form-group',\n                label: 'col-sm-2',\n                input: 'form-control col-sm-10',\n            },\n            attributes: {},\n        })\n        if (control.hasOptions) {\n            this.data.options = {}\n        }\n    }\n\n    get placeholder(): React.ReactNode {\n        return (this.control.placeholder && this.control.placeholder(this)) || null\n    }\n\n    get optionPairs(): Array<[string, string]> {\n        const { options } = this.data\n        if (options) {\n            return Object.keys(options).map(key => (\n                [key, options[key]]\n            ))\n        }\n        return []\n    }\n\n}\n\n\nexport class Control implements ControlDefinition {\n\n    id: string\n    name: string\n    icon: React.ReactNode\n\n    hasOptions?: boolean\n    placeholder?: (element: Element) => React.ReactNode\n\n    constructor(definition: ControlDefinition) {\n        this.name = definition.name\n        this.id = definition.id\n        this.icon = definition.icon\n        this.placeholder = definition.placeholder\n        this.hasOptions = definition.hasOptions\n    }\n\n    createElement(): Element {\n        return new InputElement(this)\n    }\n\n}\n\nexport function isContainer(\n    toBeDetermined: Element,\n): toBeDetermined is Container {\n    if (toBeDetermined instanceof Container) {\n        return true\n    }\n    return false\n}\n\nexport function isInput(\n    toBeDetermined: Element,\n): toBeDetermined is InputElement {\n    if (toBeDetermined instanceof InputElement) {\n        return true\n    }\n    return false\n}\n\nexport function isText(\n    toBeDetermined: Element,\n): toBeDetermined is TextElement {\n    if (toBeDetermined instanceof TextElement) {\n        return true\n    }\n    return false\n}\n\nexport class RowControl extends Control {\n\n    createElement(): Element {\n        return new Container(this, { type: 'row' })\n    }\n\n}\n\nexport class TextControl extends Control {\n    createElement(): Element {\n        return new TextElement(this)\n    }\n}\n\nexport class ColumnControl extends Control {\n    createElement(): Element {\n        return new Container(this, { type: 'column' })\n    }\n}\n\n\nexport const defaultControls = {\n    registered: new Map<string, Control>(),\n\n    register(controls: Array<Control>) {\n        controls.forEach(c => this.registered.set(c.id, c))\n    },\n}\n\ninterface InsertElementOptions {\n    id: string,\n    container: Container, destIndex: number,\n    fromIndex?: number, fromContainer?: Container\n}\nexport function addElement(\n    store: Store,\n    {\n        id, container, destIndex, fromIndex, fromContainer,\n    }: InsertElementOptions,\n): Store {\n    let cntrl: Control | undefined\n    let element: Element | undefined\n\n    if (fromIndex != null && fromContainer) {\n        element = fromContainer.children[fromIndex]\n        fromContainer.children.splice(fromIndex, 1)\n        if (fromContainer === container && fromIndex < destIndex) {\n            destIndex -= 1 // eslint-disable-line no-param-reassign\n        }\n    } else {\n        cntrl = store.controls.get(id)\n        if (!cntrl) {\n            // eslint-disable-next-line no-console\n            console.warn(`attempted to drop id ${id} but no control exists`)\n            return store\n        }\n    }\n    if (!element && cntrl) {\n        element = cntrl.createElement()\n    }\n    if (element) {\n        container.children.splice(destIndex, 0, element)\n    }\n    return { ...store }\n}\n\ninterface StoreContext {\n    store: Store\n    dispatch: React.Dispatch<Action> //  (patch:any): void\n}\n\nconst sc = React.createContext(null as any as StoreContext)\n\nexport const useStoreContext = ():StoreContext => React.useContext(sc)\n\nexport const useStore = ():Store => useStoreContext().store\n\n\ntype Action =\n    | { type: 'test', index: number }\n    | { type: 'ADD_ELEMENT', id: string,\n        container: Container, destIndex: number,\n        fromIndex?: number, fromContainer?: Container }\n    | { type: 'DELETE', target: Element, container: Container }\n    | { type: 'UPDATE', target: Element, patch: any }\n    | { type: 'EDIT', target: Element }\n    | { type: 'HIDE_EDIT' }\n    | { type: 'ADD_ATTRIBUTE', input: InputElement, nested: string }\n    | { type: 'DELETE_ATTRIBUTE', input: InputElement, nested: string, name: string }\n    | { type: 'REPLACE_NEW_ATTRIBUTE', input: InputElement, nested: string, name: string, }\n\n\nconst storeReducer = (st:Store, action: Action): Store => {\n    switch (action.type) {\n        case 'ADD_ELEMENT': {\n            return addElement(st, action)\n        }\n        case 'DELETE': {\n            action.container.children = [\n                ...action.container.children.filter(e => e.id !== action.target.id),\n            ]\n            return { ...st }\n        }\n        case 'UPDATE': {\n            action.target.data = deepmerge(action.target.data as any, action.patch)\n            return { ...st }\n        }\n        case 'EDIT': {\n            return { ...st, editing: action.target }\n        }\n        case 'HIDE_EDIT': {\n            return { ...st, editing: undefined }\n        }\n        case 'ADD_ATTRIBUTE': {\n            action.input.data[action.nested][''] = ''\n            return { ...st }\n        }\n        case 'REPLACE_NEW_ATTRIBUTE': {\n            delete action.input.data[action.nested]['']\n            action.input.data[action.nested][action.name] = ''\n            return { ...st }\n        }\n        case 'DELETE_ATTRIBUTE': {\n            delete action.input.data[action.nested][action.name]\n            return { ...st }\n        }\n    }\n\n    return st\n}\n\nexport const initStore = ():Store => {\n    const store = Object.create(null)\n    store.controls = new Map(defaultControls.registered)\n    store.container = new Container(store.controls.get('row'), { type: 'row' })\n\n    // store.elements.push(store.controls.get('select')!.createElement());\n    // [store.editing] = store.elements\n\n    return store\n}\n\nexport const useStoreReducer = () => React.useReducer(storeReducer, {}, initStore)\n\nexport const useProvidedStoreContext = ():StoreContext => {\n    const [store, dispatch] = useStoreReducer()\n\n    return React.useMemo<StoreContext>(() => ({ store, dispatch }), [store])\n}\n\nexport { sc as StoreContext }\n","import * as React from 'react'\nimport { CaretSquareDown } from '@styled-icons/fa-regular/CaretSquareDown'\nimport { Font } from '@styled-icons/fa-solid/Font'\nimport { GripLines } from '@styled-icons/fa-solid/GripLines'\nimport { Square } from '@styled-icons/fa-regular/Square'\nimport { Heading } from '@styled-icons/fa-solid/Heading'\nimport { Paragraph } from '@styled-icons/fa-solid/Paragraph'\nimport { GripLinesVertical } from '@styled-icons/fa-solid/GripLinesVertical'\nimport { DotCircle } from '@styled-icons/fa-solid/DotCircle'\nimport { CheckSquare } from '@styled-icons/fa-solid/CheckSquare'\n\nimport {\n    Control, RowControl, ColumnControl, InputElement, TextControl, TextElement, defaultControls,\n} from './store'\n\ntype RenderT = (key: string, value: string) => React.ReactNode\n\nconst renderOptions = (el: InputElement, rend: RenderT) => {\n    const options = el.optionPairs\n    if (options.length === 0) {\n        return rend('', '')\n    }\n    return options.map(([name, label]) => (\n        <label key={name}>{rend(name, label)}<span>{label}</span></label>\n    ))\n}\n\n\ndefaultControls.register([\n    new RowControl({\n        id: 'row',\n        name: 'Row',\n        icon: <GripLines />,\n    }),\n    new ColumnControl({\n        id: 'col',\n        name: 'Column',\n        icon: <GripLinesVertical />,\n    }),\n\n    new TextControl({\n        id: 'heading',\n        name: 'Heading',\n        icon: <Heading />,\n        placeholder(h:TextElement) { return React.createElement(h.data.tag, h.data.text) },\n    }),\n\n    new TextControl({\n        id: 'para',\n        name: 'Paragraph',\n        icon: <Paragraph />,\n        placeholder(para:TextElement) { return <p>{para.data.text}</p> },\n    }),\n\n    new Control({\n        id: 'input',\n        name: 'Text Input',\n        icon: <Font />,\n        placeholder() { return <input type='text' className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'textarea',\n        name: 'Text Area',\n        icon: <Square />,\n        placeholder() { return <textarea className='form-control' readOnly /> },\n    }),\n\n    new Control({\n        id: 'checkbox',\n        name: 'Checkboxes',\n        icon: <CheckSquare />,\n        hasOptions: true,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input type=\"checkbox\" name={n}\n                    className={el.data.classNames.input} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'radio',\n        name: 'Radio Input',\n        icon: <DotCircle />,\n        placeholder(el: InputElement) {\n            return renderOptions(el, (n: string) => (\n                <input key={n} type=\"radio\" name={n} className={el.data.classNames.input} readOnly />\n            ))\n        },\n    }),\n    new Control({\n        id: 'select',\n        name: 'Select',\n        hasOptions: true,\n        icon: <CaretSquareDown />,\n        placeholder(el: InputElement) {\n            const options = el.optionPairs\n            return (\n                <select name={el.data.name}>\n                    {options.map(([v, l]) => (\n                        <option key={v} value={v}>{l}</option>\n                    ))}\n                </select>\n            )\n        },\n    }),\n])\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { useDrag } from 'react-dnd'\nimport { useStore, ControlDefinition } from './store'\nimport './default-controls'\n\nconst ControlLabelEl = styled.li({\n    cursor: 'pointer',\n    backgroundColor: 'white',\n    listStyle: 'none',\n    margin: '5px',\n    padding: '10px',\n    userSelect: 'none',\n    border: '1px dashed #ddd',\n    svg: {\n        height: '20px',\n        marginRight: '0.5rem',\n    },\n})\n\nconst ControlLabel:React.FC<ControlDefinition> = ({ id, name, icon }) => {\n    const [, drag] = useDrag({\n        item: { id, type: 'control' },\n    })\n    return (\n        <ControlLabelEl ref={drag}>\n            {icon}\n            <span>{name}</span>\n        </ControlLabelEl>\n    )\n}\n\nconst ControlsListingEl = styled.div({\n    overflow: 'auto',\n    paddingRight: '10px',\n    ul: {\n        padding: 0,\n        margin: 0,\n    },\n})\nexport const ControlsListing:React.FC = () => {\n    const { controls } = useStore()\n    return (\n        <ControlsListingEl className=\"controls-listing\">\n            <ul>\n                {[...controls.values()].map(definition => (\n                    <ControlLabel key={definition.id} {...definition} />))}\n            </ul>\n        </ControlsListingEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport cn from 'classnames'\nimport { useDrop, useDrag, DragElementWrapper, DragSourceOptions } from 'react-dnd'\nimport { GripHorizontal } from '@styled-icons/fa-solid/GripHorizontal'\nimport { Edit } from '@styled-icons/fa-solid/Edit'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\n\nimport {\n    useStore,\n    Element,\n    isContainer,\n    isText,\n    isInput,\n    InputElement,\n    TextElement,\n    useStoreContext,\n    Container,\n} from './store'\n\nconst revealColor = '#e8e8e8'\nconst dropAcceptableColor = '#c1c1c1'\n\nconst FormDropEl = styled.div({\n    minHeight: '15px',\n    border: '1px solid white',\n    '&:last-child': {\n        flex: 1,\n    },\n})\n\ninterface DropProps {\n    index: number\n    container: Container\n}\n\ninterface DropItem {\n    id: string\n    fromIndex?: number\n    fromContainer?: Container\n}\n\nconst useFormDrop = ({ index, container }: DropProps) => {\n    const sc = useStoreContext()\n    const [{ isHovered }, dropRef] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        drop: (item) => {\n            const { id, fromIndex, fromContainer } = (item as any as DropItem)\n            sc.dispatch({\n                type: 'ADD_ELEMENT',\n                id,\n                destIndex: index,\n                container,\n                fromIndex,\n                fromContainer,\n            })\n        },\n    })\n    return { isHovered, dropRef }\n}\n\nexport const FormDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n    return <FormDropEl ref={dropRef} className={cn('drop', { isHovered })} />\n}\n\nconst ElementPreviewEl = styled.div({\n    display: 'flex',\n    flexDirection: 'row',\n    position: 'relative',\n    padding: '10px',\n    color: '#0c0c0c',\n    justifyContent: 'space-between',\n    alignItems: 'stretch',\n    minHeight: '40px',\n    '&.row': {\n        '> .column': {\n            margin: '-1px',\n            flex: 1,\n        },\n        '> .container.controls': {\n            top: 'calc(50% - 22px)',\n            left: '-15px',\n            right: undefined,\n            display: 'flex',\n            flexDirection: 'column',\n            '> *': {\n                marginLeft: 0,\n            },\n        },\n    },\n\n    '&.column': {\n        flexDirection: 'column',\n        '.container-drop': {\n            width: '100%',\n        },\n        '&.empty': {\n            flex: 1,\n        },\n    },\n\n    '.control-type': {\n        fontSize: '0.8rem',\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        border: '1px solid',\n        padding: '2px',\n        borderRadius: '8px',\n    },\n\n    '&:hover': {\n        backgroundColor: 'white',\n        '> .controls': {\n            opacity: 1,\n        },\n    },\n\n    '.controls': {\n        opacity: 0,\n        transition: 'opacity 0.3s ease-in-out',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'flex-start',\n        '> *': {\n            marginLeft: '15px',\n        },\n        button: {\n            border: 0,\n            padding: 0,\n            cursor: 'pointer',\n            backgroundColor: 'transparent',\n            '&:hover': {\n                svg: { color: '#212121' },\n            },\n        },\n        svg: {\n            height: '20px',\n            color: 'gray',\n            transition: 'opacity 0.3s ease-in-out',\n        },\n        '.move svg': { cursor: 'move' },\n    },\n\n    '.inline-text': {\n        padding: 0,\n        border: 0,\n        fontSize: 'inherit',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n\n    '.label': {\n        fontSize: '20px',\n        marginBottom: '5px',\n    },\n\n    '.control-preview': {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        '&.row': {\n            flexDirection: 'column',\n        },\n    },\n})\n\nconst Controls:React.FC<{\n    target: Element | Container\n    container: Container,\n    drag: DragElementWrapper<DragSourceOptions>,\n}> = ({\n    target, container, drag,\n}) => {\n    const sc = useStoreContext()\n\n    return (\n        <div className={cn('controls', { container: isContainer(target) })}>\n            <button className='trash' onClick={() => sc.dispatch({\n                type: 'DELETE', target, container,\n            })}>\n                <TrashAlt />\n            </button>\n            <button onClick={() => sc.dispatch({ type: 'EDIT', target })}>\n                <Edit />\n            </button>\n            <button className='move' ref={drag}>\n                <GripHorizontal />\n            </button>\n        </div>\n    )\n}\n\nconst InputPreview: React.FC<{\n    index: number\n    input: InputElement\n    container: Container\n}> = ({\n    index, input, container,\n}) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: input.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', input.control.id)}\n        >\n            <div className='control-preview'>\n                <span>{input.data.label}</span>\n                {input.placeholder}\n            </div>\n            <Controls target={input} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\nconst TextPreview: React.FC<{\n    index: number\n    control: TextElement\n    container: Container\n}> = ({\n    index, control, container,\n}) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: control.id, fromIndex: index, fromContainer: container, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n    const text = React.createElement(control.data.tag, {}, control.data.text)\n\n    return (\n        <ElementPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('element-preview', control.control.id)}\n        >\n            <div className='control-preview'>\n                {text}\n            </div>\n            <Controls target={control} container={container} drag={drag} />\n        </ElementPreviewEl>\n    )\n}\n\n\nconst ContainerPreviewEl = styled(ElementPreviewEl)({\n    border: '1px dashed gray',\n    minHeight: '40px',\n    borderRadius: '5px',\n    padding: '0',\n    '&.empty': {\n        alignItems: 'stretch',\n        '> .drop': {\n            flex: 1,\n        },\n    },\n    '.container.controls': {\n        position: 'absolute',\n        top: '-27px',\n        left: 'calc(50% - 15px)',\n        background: 'white',\n        padding: '2px 5px',\n        borderTopRightRadius: '5px',\n        borderTopLeftRadius: '5px',\n        border: '1px dashed gray',\n        borderBottomWidth: 0,\n    },\n    '.element-preview': {\n        flex: 1,\n    },\n    '&:hover': {\n        '.container-drop': {\n            backgroundColor: revealColor,\n        },\n    },\n})\n\nconst ContainerDropEl = styled(FormDropEl)({\n    minWidth: '20px',\n\n})\n\nconst ContainerDrop: React.FC<DropProps> = (props) => {\n    const { isHovered, dropRef } = useFormDrop(props)\n\n    return (\n        <ContainerDropEl\n            ref={dropRef}\n            className={cn('drop', 'container-drop', { isHovered })}\n        />\n    )\n}\n\nconst ContainerPreview:React.FC<{\n    container: Container\n    parent: Container\n    index: number\n}> = ({ parent, container, index }) => {\n    const [{ opacity }, drag, preview] = useDrag({\n        item: { id: container.id, fromIndex: index, fromContainer: parent, type: 'control' },\n        collect: monitor => ({\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        }),\n    })\n\n    return (\n        <ContainerPreviewEl\n            ref={preview}\n            style={{ opacity }}\n            className={cn('container-preview', container.type, {\n                empty: container.children.length === 0,\n            })}\n        >\n            <ContainerDrop container={container} index={0} />\n\n            {container.children.map((el, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={el} />\n                    <ContainerDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n\n            <Controls target={container} container={parent} drag={drag} />\n\n        </ContainerPreviewEl>\n    )\n}\n\n\nconst ElementPreview:React.FC<{\n    el: Element|Container,\n    index: number,\n    container: Container,\n}> = ({ el, index, container }) => {\n    if (isContainer(el)) {\n        return <ContainerPreview parent={container} container={el} index={index} />\n    }\n    if (isText(el)) {\n        return <TextPreview control={el} container={container} index={index} />\n    }\n    if (isInput(el)) {\n        return <InputPreview input={el} container={container} index={index} />\n    }\n    return null\n}\n\n\nconst FormElementsEl = styled.div<{editing: boolean}>(({ editing }) => ({\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyItems: 'flex-start',\n    background: '#fafafa',\n    padding: '10px',\n    boxSizing: 'border-box',\n    boxShadow: '0 0 2px 1px rgba(0, 0, 0, 0.1)',\n    opacity: editing ? '0.3' : '1',\n    transition: 'opacity 0.3s ease-in-out',\n    width: 'fit-content',\n    minWidth: '100%',\n    '> .container-preview': {\n        margin: '0 2px',\n    },\n    '&.isHovered': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '&:hover': {\n        '.drop': {\n            backgroundColor: revealColor,\n        },\n    },\n    '.drop.isHovered': {\n        borderColor: 'black',\n        backgroundColor: dropAcceptableColor,\n    },\n    '.drop:hover': {\n        backgroundColor: dropAcceptableColor,\n    },\n    'p, h1, h2, h3, h4, h5, h6': {\n        padding: 0,\n        margin: 0,\n    },\n}))\nexport const FormElements = () => {\n    const { container, editing } = useStore()\n    const [{ isHovered }, drop] = useDrop({\n        accept: 'control',\n        collect(item) {\n            return { isHovered: item.isOver() }\n        },\n        canDrop: () => false,\n    })\n    // if (!container.children.length) {\n    //     return <FormDrop container={container} index={0} />\n    // }\n\n    return (\n        <FormElementsEl ref={drop} editing={!!editing} className={cn('form-elements', { isHovered })}>\n            <FormDrop container={container} index={0} />\n            {container.children.map((e, i) => (\n                <React.Fragment key={i}>\n                    <ElementPreview index={i} container={container} el={e} />\n                    <FormDrop container={container} index={i + 1} />\n                </React.Fragment>\n            ))}\n        </FormElementsEl>\n    )\n}\n","import { Ref, useEffect, useCallback, useRef, useMemo } from 'react'\n\n\ninterface Options {\n  /**\n   * target ref on which the events should be listened. If no target is specified,\n   * events are listened to on the window\n   */\n  target?: Ref<HTMLElement>;\n}\n\nconst EVENT_NAME = 'keydown'\n\nconst defaultOptions = {\n\n\n}\n\n// hook from https://usehooks.com/useKeyPress/\nexport function useKeyPress(\n    keys: string | Array<string>,\n    callback: (e: KeyboardEvent) => any,\n    opts?: Options,\n): void {\n    const keyList: Array<string> = useMemo(() => {\n        if (Array.isArray(keys)) {\n            return keys\n        }\n        return [keys]\n    }, [keys])\n    const options = Object.assign({}, defaultOptions, opts) as any\n\n    const callbackRef = useRef<(e: KeyboardEvent) => any>(callback)\n    const { target } = options\n\n    useEffect(() => {\n        callbackRef.current = callback\n    })\n\n    const handle = useCallback(\n        (e: KeyboardEvent) => {\n            if (keyList.some(identifier => e.key === identifier)) {\n                callbackRef.current(e)\n            }\n        },\n        [keyList],\n    )\n\n    useEffect(() => {\n        if (typeof window !== 'undefined') {\n            const targetNode = target ? target.current : window\n            if (targetNode) {\n                targetNode.addEventListener(EVENT_NAME, handle)\n            }\n\n            return () => {\n                if (targetNode) {\n                    targetNode.removeEventListener(EVENT_NAME, handle)\n                }\n            }\n        }\n        return undefined\n    }, [keyList, target, callback])\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { TrashAlt } from '@styled-icons/fa-solid/TrashAlt'\nimport {\n    useStoreContext, InputElement, Element, Container, isContainer, isInput, isText, TextElement,\n} from './store'\nimport { useKeyPress } from '../hooks/use-key-press'\n\n\nconst Width:React.FC<{\n    el: Element,\n    size: string,\n}> = ({ el, size }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n\n    return (\n        <label>\n            <span>{size}:</span>\n            <input\n                ref={inputRef}\n                type=\"number\"\n                min=\"1\"\n                max=\"12\"\n                value={el.data.sizes[size] || 12}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: el,\n                    patch: { sizes: { [size]: Math.max(1, Math.min(12, Number(value))) } },\n                })}\n            />\n        </label>\n    )\n}\n\nconst Sizes:React.FC<{\n    el: Element,\n}> = ({ el }) => {\n    if (isContainer(el) && el.type === 'row') {\n        return null\n    }\n    return (\n        <fieldset className=\"widths\">\n            <legend>Widths (1-12):</legend>\n            <div className=\"row\">\n                <Width size=\"mobile\" el={el} />\n                <Width size=\"tablet\" el={el} />\n                <Width size=\"desktop\" el={el} />\n            </div>\n        </fieldset>\n    )\n}\n\nconst NewAttribute: React.FC<{ input: InputElement; nested: string }> = ({\n    input,\n    nested,\n}) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const saveValue = () => sc.dispatch({\n        type: 'REPLACE_NEW_ATTRIBUTE', nested, input, name: inputRef.current!.value,\n    })\n    const deleteAttr = () => sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: '' })\n\n    useKeyPress(['Enter', 'Escape'], (ev) => {\n        switch (ev.key) {\n            case 'Enter': {\n                saveValue()\n                break\n            }\n            case 'Escape': {\n                deleteAttr()\n                break\n            }\n        }\n    }, { target: inputRef })\n\n    React.useEffect(() => {\n        inputRef.current!.focus()\n    }, [])\n\n    return (\n        <label>\n            <input\n                ref={inputRef}\n                defaultValue=''\n                onBlur={saveValue}\n            />\n            <span className=\"value\" />\n            <button onClick={deleteAttr} className='del-attr'>\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\n\nconst EditAttribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string\n}> = ({ input, nested, attributeName }) => {\n    const sc = useStoreContext()\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    useKeyPress(['Enter', 'Tab'], (ev) => {\n        ev.preventDefault()\n        sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    }, { target: inputRef })\n    React.useEffect(() => {\n        const attrs = Object.keys(input.data[nested])\n        if (attributeName === attrs[attrs.length - 1]) {\n            inputRef.current!.focus()\n        }\n    }, [])\n    return (\n        <label>\n            <span>{attributeName}:</span>\n            <input\n                ref={inputRef}\n                className=\"value\"\n                value={input.data[nested][attributeName] || ''}\n                onChange={({ target: { value } }) => sc.dispatch({\n                    type: 'UPDATE',\n                    target: input,\n                    patch: { [nested]: { [attributeName]: value } },\n                })}\n            />\n            <button\n                onClick={() => {\n                    sc.dispatch({ type: 'DELETE_ATTRIBUTE', input, nested, name: attributeName })\n                }}\n                className='del-attr'\n            >\n                <TrashAlt />\n            </button>\n        </label>\n    )\n}\n\nconst Attribute: React.FC<{\n    input: InputElement\n    nested: string\n    attributeName: string,\n}> = ({ input, nested, attributeName }) => {\n    if ('' === attributeName) {\n        return <NewAttribute nested={nested} input={input} />\n    }\n    return <EditAttribute nested={nested} attributeName={attributeName} input={input} />\n}\n\n\nconst Options: React.FC<{\n    label: string, input: InputElement, nested: string,\n}> = ({ label, input, nested }) => {\n    const sc = useStoreContext()\n    const options = input.data[nested]\n    if (!options) {\n        return null\n    }\n    const addAttribute = () => sc.dispatch({ type: 'ADD_ATTRIBUTE', nested, input })\n    const optionNames = Object.keys(options)\n    return (\n        <fieldset className='options'>\n            <legend>{label}:</legend>\n            <div className='controls'>\n                <button onClick={addAttribute} className='add-attr'>\n                    +\n                </button>\n            </div>\n            {optionNames.length > 0 && (\n                <div className=\"heading\">\n                    <span>ID</span>\n                    <span>Value</span>\n                </div>)}\n            {optionNames.map(attrName => (\n                <Attribute\n                    key={attrName}\n                    nested={nested}\n                    input={input}\n                    attributeName={attrName}\n                />\n            ))}\n        </fieldset>\n    )\n}\n\nconst InputEdit: React.FC<{ input: InputElement }> = ({ input }) => {\n    const sc = useStoreContext()\n    const { data } = input\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: input, patch })\n\n    return (\n        <div>\n            <h4 className=\"title\">Edit {input.control.name}</h4>\n            <label>\n                <span>Label:</span>\n                <input\n                    className=\"value\"\n                    value={data.label || ''}\n                    onChange={({ target: { value } }) => dp({ label: value })}\n                />\n            </label>\n            <label>\n                <span>Name:</span>\n                <input\n                    className=\"value\"\n                    value={data.name || ''}\n                    onChange={({ target: { value } }) => dp({ name: value })}\n                />\n            </label>\n\n            <Options input={input} label=\"Attributes\" nested=\"attributes\" />\n\n            <fieldset>\n                <legend>Class Names:</legend>\n                <label>\n                    <span>Wrapper:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.wrapper || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { wrapper: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Label:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.label || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { label: value } })\n                        }\n                    />\n                </label>\n                <label>\n                    <span>Input:</span>\n                    <input\n                        className=\"value\"\n                        value={data.classNames.input || ''}\n                        onChange={({ target: { value } }) => dp({ classNames: { input: value } })\n                        }\n                    />\n                </label>\n            </fieldset>\n\n            <Sizes el={input} />\n\n            <Options input={input} label=\"Options\" nested=\"options\" />\n        </div>\n    )\n}\n\nconst ContainerEdit: React.FC<{ container: Container }> = ({ container }) => {\n    const sc = useStoreContext()\n    const { data } = container\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: container, patch })\n\n    return (\n        <div>\n            <label>\n                <span>Class:</span>\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n            <Sizes el={container} />\n        </div>\n    )\n}\n\nconst TextHeadingSize: React.FC<{\n    txt: TextElement\n    onChange: (value: string) => void\n}> = ({ txt, onChange }) => {\n    if (txt.control.id !== 'heading') {\n        return null\n    }\n    return (\n        <label>\n            <span>Size:</span>\n            <select value={txt.data.tag} onChange={ev => onChange(ev.target.value)}>\n                <option value=\"h1\">Heading 1</option>\n                <option value=\"h2\">Heading 2</option>\n                <option value=\"h3\">Heading 3</option>\n                <option value=\"h4\">Heading 4</option>\n                <option value=\"h5\">Heading 5</option>\n                <option value=\"h6\">Heading 6</option>\n            </select>\n        </label>\n    )\n}\n\nconst TextEdit: React.FC<{ control: TextElement }> = ({ control }) => {\n    const sc = useStoreContext()\n    const { data } = control\n    const dp = (patch: any) => sc.dispatch({ type: 'UPDATE', target: control, patch })\n\n    return (\n        <div>\n            <label>\n                <span>Text:</span>\n\n                <textarea\n                    id={control.id}\n                    value={data.text || ''}\n                    onChange={({ target: { value } }) => dp({ text: value })}\n                />\n            </label>\n            <TextHeadingSize\n                txt={control}\n                onChange={(tag:string) => dp({ tag })}\n\n            />\n            <label>\n                <span>Class:</span>\n\n                <input\n                    className=\"value\"\n                    value={data.className || ''}\n                    onChange={({ target: { value } }) => dp({ className: value })}\n                />\n            </label>\n            <Sizes el={control} />\n        </div>\n    )\n}\n\n\nconst Edit: React.FC<{ target: Element }> = ({ target }) => {\n    if (isContainer(target)) {\n        return <ContainerEdit container={target} />\n    }\n    if (isInput(target)) {\n        return <InputEdit input={target} />\n    }\n    if (isText(target)) {\n        return <TextEdit control={target} />\n    }\n    return null\n}\n\n\nconst EditPanelEl = styled.div<{ editing: boolean }>(({ editing }) => ({\n    position: 'absolute',\n    height: '100%',\n    width: '400px',\n    background: 'white',\n    right: editing ? '0' : '-420px',\n    transition: 'right 0.3s ease-in-out',\n    display: 'flex',\n    boxShadow: '-5px 0px 5px 0px rgba(50, 50, 50, 0.75)',\n\n    '.title': {\n        margin: '15px 0',\n        borderBottom: '1px solid lightgray',\n        paddingBottom: '10px',\n    },\n    '.edit-pane': {\n        flex: 1,\n        overflowY: 'auto',\n        padding: '10px',\n    },\n    '.footer': {\n        padding: '10px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        borderTop: '1px solid lightGrey',\n    },\n    legend: {\n        backgroundColor: '#000',\n        color: '#fff',\n        padding: '3px 6px',\n    },\n    'label, .heading': {\n        display: 'flex',\n        marginBottom: '5px',\n        '> *:first-child': {\n            width: '125px',\n        },\n    },\n    '.heading > *': {\n        fontWeight: 'bold',\n    },\n    '.value': {\n        minWidth: '150px',\n        flex: 1,\n    },\n    button: {\n        marginLeft: '1rem',\n        svg: {\n            height: '18px',\n        },\n    },\n    fieldset: {\n        marginTop: '1rem',\n        '.controls': {\n            display: 'flex',\n\n            justifyContent: 'flex-end',\n            '.add-attr': {\n                margin: '-10px -5px 10px 0',\n            },\n        },\n    },\n    textarea: {\n        width: '100%',\n        minHeight: '50px',\n        padding: '4px',\n    },\n    '.widths': {\n        '.row': {\n            display: 'flex',\n            justifyContent: 'space-between',\n            span: {\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                marginRight: '10px',\n                width: 'inherit',\n            },\n        },\n    },\n}))\n\nexport const EditPanel = () => {\n    const sc = useStoreContext()\n    const panelRef = React.useRef<HTMLDivElement>(null)\n    const { editing } = sc.store\n    React.useEffect(() => {\n        if (editing && panelRef.current) {\n            const firstInput = panelRef.current.querySelector('input,textarea')\n            if (firstInput) {\n                setTimeout(() => { // setTimeout to focus after animation completes\n                    (firstInput as HTMLInputElement).focus()\n                }, 250)\n            }\n        }\n    }, [editing])\n    return (\n        <EditPanelEl editing={!!editing}>\n            <div ref={panelRef} className='edit-pane'>\n                {editing && <Edit target={editing} />}\n            </div>\n            <div className='footer'>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={() => sc.dispatch({ type: 'HIDE_EDIT' })}\n                >\n                    Done\n                </button>\n            </div>\n        </EditPanelEl>\n    )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport { DndProvider } from 'react-dnd'\nimport { ControlsListing } from './builder/controls'\nimport { useProvidedStoreContext, StoreContext, Container } from './builder/store'\nimport { FormElements } from './builder/form'\nimport { EditPanel } from './builder/edit-panel'\n\nconst FormPanelEl = styled.div({\n    display: 'flex',\n    width: '100%',\n    overflow: 'scroll',\n})\nconst FormPanel = () => {\n    return (\n        <FormPanelEl>\n            <FormElements />\n        </FormPanelEl>\n    )\n}\n\n// const ControlsPanel = () => {\n//     return (\n//         <div>\n//             <ControlsListing />\n//         </div>\n//     )\n// }\n\nconst BuilderEl = styled.div({\n    display: 'grid',\n    gridTemplateColumns: '1fr 200px',\n    gridTemplateRows: '1fr',\n    height: '100%',\n    gap: '10px',\n    position: 'relative',\n    overflow: 'hidden',\n    '> *': {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n})\n\ninterface BuilderProps {\n    onChange?(form: Container): void\n}\n\nexport const Builder:React.FC<BuilderProps> = ({ onChange }) => {\n    const ctx = useProvidedStoreContext()\n    React.useEffect(() => {\n        if (onChange) {\n            onChange(ctx.store.container)\n        }\n    }, [onChange, ctx.store])\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <StoreContext.Provider value={ctx}>\n                <BuilderEl>\n                    <FormPanel />\n                    <ControlsListing />\n                    <EditPanel />\n                </BuilderEl>\n            </StoreContext.Provider>\n        </DndProvider>\n    )\n}\n","import React from 'react'\n\nimport { Builder, Container } from 'formial'\n\nimport 'formial/dist/index.css'\n\nconst onChange = (container: Container) => {\n    console.log(container)\n}\n\nconst App = () => {\n\n    return (\n        <div id=\"example-builder\">\n            <Builder onChange={onChange}/>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}